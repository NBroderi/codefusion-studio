/**
 *
 * Copyright (c) 2025 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
// Generated by ts-to-zod
import { z } from 'zod';

export const zAccessTag = z.object({
    read: z.array(z.string()).optional(),
    write: z.array(z.string()).optional(),
});

export const zAPIKey = z.object({
    createdAt: z.string(),
    description: z.string().optional(),
    expiration: z.string(),
    id: z.string(),
    key: z.string().optional(),
    maskedKey: z.string(),
    ownerEmail: z.string(),
    ownerID: z.string(),
    read: z.array(z.string()).optional(),
    role: z.union([z.literal('user'), z.literal('admin')]),
    write: z.array(z.string()).optional(),
});

export const zBoard = z.object({
    accessTag: zAccessTag.optional(),
    description: z.string(),
    id: z.string(),
    name: z.string(),
    packageIDs: z.array(z.string()),
    productUrl: z.string().optional(),
    socID: z.string(),
});

export const zCoreType = z.object({
    architecture: z.string(),
    description: z.string().optional(),
    id: z.string(),
    isa: z.string(),
});

export const zCreateInputBoard = z.object({
    accessTag: zAccessTag.optional(),
    description: z.string(),
    name: z.string(),
    packageIdxs: z.array(z.number()),
    productUrl: z.string().optional(),
});

export const zCreateInputCoreType = z.object({
    architecture: z.string().optional(),
    description: z.string().optional(),
    id: z.string().optional(),
    isa: z.string().optional(),
});

export const zCreateInputFamily = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
});

export const zCreateInputPackage = z.object({
    accessTag: zAccessTag.optional(),
    description: z.string(),
    name: z.string(),
    packageType: z.union([
        z.literal('WLP'),
        z.literal('TQFN'),
        z.literal('TQFP'),
        z.literal('CTBGA'),
        z.literal('CSBGA'),
    ]),
});

export const zDocumentation = z.object({
    categories: z.array(
        z.union([z.literal('home'), z.literal('dashboard')]),
    ),
    name: z.string(),
    url: z.string(),
});

export const zMedia = z.object({
    mediaType: z.union([
        z.literal('article'),
        z.literal('video'),
        z.literal('tutorial'),
    ]),
    name: z.string(),
    thumbnail: z.string().optional(),
    url: z.string(),
});

export const zPackage = z.object({
    accessTag: zAccessTag.optional(),
    description: z.string(),
    id: z.string(),
    name: z.string(),
    packageType: z.union([
        z.literal('WLP'),
        z.literal('TQFN'),
        z.literal('TQFP'),
        z.literal('CTBGA'),
        z.literal('CSBGA'),
    ]),
    socID: z.string(),
});

export const zResource = z.object({
    accessTag: zAccessTag.optional(),
    addedAt: z.string(),
    id: z.string(),
    mediaType: z.union([
        z.literal('article'),
        z.literal('video'),
        z.literal('tutorial'),
    ]),
    name: z.string(),
    thumbnail: z.string().optional(),
    url: z.string(),
});

export const zCorePart = z.object({
    accessTag: zAccessTag.optional(),
    coreType: zCoreType,
    dataModelCoreID: z.string(),
    description: z.string().optional(),
    extensions: z.array(z.string()),
    id: z.string(),
    name: z.string(),
    primary: z.boolean(),
    socID: z.string(),
});

export const zSoCFamily = z.object({
    id: z.string(),
    name: z.string(),
});

export const zSoCSummary = z.object({
    accessTag: zAccessTag.optional(),
    description: z.string(),
    id: z.string(),
    name: z.string(),
});

export const zUser = z.object({
    email: z.string(),
    id: z.string(),
    read: z.array(z.string()).optional(),
    userType: z.union([z.literal('user'), z.literal('admin')]),
    write: z.array(z.string()).optional(),
});

export const zCreateInputCore = z.object({
    accessTag: zAccessTag.optional(),
    coreType: zCreateInputCoreType,
    dataModelCoreID: z.string(),
    description: z.string().optional(),
    extensions: z.array(z.string()),
    name: z.string(),
    primary: z.boolean().optional(),
});

export const zSoC = z.object({
    accessTag: zAccessTag.optional(),
    boards: z.array(zBoard),
    cores: z.array(zCorePart),
    description: z.string(),
    documentation: z.array(zDocumentation).optional(),
    family: zSoCFamily,
    id: z.string(),
    media: z.array(zMedia).optional(),
    name: z.string(),
    packages: z.array(zPackage),
});
