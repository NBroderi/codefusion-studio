{"version":3,"file":"cfs-soc-controls-override.cjs","sources":["../../../../api/dist/src/types/cfs-feature.js","../../../../common/services/cfs-soc-controls-override.ts"],"sourcesContent":["/**\n *\n * Copyright (c) 2024-2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexport var CfsFeatureScope;\n(function (CfsFeatureScope) {\n    /**\n     * Feature scope relating to workspace generation\n     */\n    CfsFeatureScope[\"Workspace\"] = \"workspace\";\n    /**\n     * Feature scope relating to project generation\n     */\n    CfsFeatureScope[\"Project\"] = \"project\";\n    /**\n     * Feature scope relating to code generation\n     */\n    CfsFeatureScope[\"CodeGen\"] = \"codegen\";\n    /**\n     * Feature scope relating to memory allocation\n     */\n    CfsFeatureScope[\"Memory\"] = \"memory\";\n    /**\n     * Feature scope relating to peripheral configuration\n     */\n    CfsFeatureScope[\"Peripheral\"] = \"peripheral\";\n    /**\n     * Feature scope relating to Pin configuration\n     */\n    CfsFeatureScope[\"PinConfig\"] = \"pinConfig\";\n    /**\n     * Feature scope relating to clock configuration\n     */\n    CfsFeatureScope[\"ClockConfig\"] = \"clockConfig\";\n})(CfsFeatureScope = CfsFeatureScope || (CfsFeatureScope = {}));\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsFeatureScope,\n  CfsPluginInfo,\n  CfsPluginProperty,\n  CfsSocDataModel,\n  SocControl,\n} from \"cfs-plugins-api\";\nimport {\n  ControlDirective,\n  CfsSocControlsOverrideService,\n} from \"./cfs-plugin-services.js\";\n\n/**\n * Service for handling property control directives in CFS plugins\n */\nexport class CfsSocControlsOverride implements CfsSocControlsOverrideService {\n  /**\n   * Constructor\n   * @param cfsPluginInfo - The plugin information containing property directives\n   */\n  constructor(protected cfsPluginInfo: CfsPluginInfo) {}\n\n  /**\n   * Get properties for a specific scope with control directives applied\n   * @param scope - The scope of properties to retrieve (Peripheral, PinConfig, etc.)\n   * @param soc - Optional SoC data model containing control definitions\n   * @returns The properties with control directives applied\n   */\n  overrideControls(\n    scope: CfsFeatureScope,\n    soc?: CfsSocDataModel,\n  ): Record<string, SocControl[]> | CfsPluginProperty[] {\n    // When no soc is provided, we can assume that the user is not interested in\n    // overriding SoC controls, so we can return the regular properties (if found)\n    if (soc === undefined) {\n      return (\n        this.cfsPluginInfo.properties?.[scope] ?? ([] as CfsPluginProperty[])\n      );\n    }\n\n    const controls: Record<string, SocControl[]> = JSON.parse(\n      JSON.stringify(soc.Controls),\n    ) as Record<string, SocControl[]>;\n\n    if (scope === CfsFeatureScope.Peripheral) {\n      delete controls.ClockConfig;\n      delete controls.PinConfig;\n\n      const directives = this.cfsPluginInfo.properties?.[\n        scope\n      ] as unknown as Record<string, ControlDirective>;\n\n      const result = Object.entries(controls).reduce(\n        (acc, [targetName, targetControls]) => {\n          const directive = directives[targetName];\n\n          if (Object.keys(directive ?? {}).length > 0) {\n            const {\n              supportedControls,\n              addedControls,\n              removedControls,\n              modifiedControls,\n              defaultOverrides,\n            } = directive;\n\n            let modifiedPeripheralControls = [...targetControls];\n\n            // Apply supported or removed controls\n            if (supportedControls) {\n              modifiedPeripheralControls = modifiedPeripheralControls.filter(\n                (control) =>\n                  supportedControls.find(\n                    (supportedControl) => control.Id === supportedControl.Id,\n                  ),\n              );\n            } else if (removedControls) {\n              removedControls.forEach((removedControl) => {\n                modifiedPeripheralControls = modifiedPeripheralControls.filter(\n                  (control) => control.Id !== removedControl.Id,\n                );\n              });\n            }\n\n            // Add controls\n            if (addedControls) {\n              addedControls.forEach((addedControl) => {\n                modifiedPeripheralControls.push({\n                  ...addedControl,\n                  PluginOption: true,\n                } as SocControl);\n              });\n            }\n\n            // Modify controls\n            if (modifiedControls) {\n              modifiedControls.forEach((modifiedControl) => {\n                const controlIndex = modifiedPeripheralControls.findIndex(\n                  (control) => control.Id === modifiedControl.Id,\n                );\n                if (controlIndex !== -1) {\n                  modifiedPeripheralControls[controlIndex] = {\n                    ...modifiedPeripheralControls[controlIndex],\n                    ...modifiedControl,\n                  };\n                }\n              });\n            }\n\n            // Apply default overrides\n            if (defaultOverrides && soc) {\n              defaultOverrides.forEach((defaultOverride) => {\n                if (typeof defaultOverride.partRegexp === \"string\") {\n                  const regexp = new RegExp(defaultOverride.partRegexp);\n                  if (!regexp.test(soc.Name)) {\n                    return;\n                  }\n                }\n\n                const controlIndex = modifiedPeripheralControls.findIndex(\n                  (control) => control.Id === defaultOverride.Id,\n                );\n\n                if (controlIndex !== -1) {\n                  modifiedPeripheralControls[controlIndex] = {\n                    ...modifiedPeripheralControls[controlIndex],\n                    Default: defaultOverride.Value,\n                  };\n                }\n              });\n            }\n\n            acc[targetName] = modifiedPeripheralControls;\n          } else {\n            acc[targetName] = targetControls;\n          }\n          return acc;\n        },\n        {} as Record<string, SocControl[]>,\n      );\n\n      return result;\n    }\n\n    // Handle Memory scope\n    if (scope === CfsFeatureScope.Memory) {\n      const directives = this.cfsPluginInfo.properties?.[\n        scope\n      ] as unknown as ControlDirective;\n      const memoryControls: SocControl[] = [];\n\n      if (directives && directives.addedControls) {\n        directives.addedControls.forEach((control) => {\n          memoryControls.push({\n            ...control,\n            PluginOption: true,\n          } as SocControl);\n        });\n      }\n\n      return { [scope]: memoryControls };\n    }\n\n    // Handle PinConfig scope\n    if (scope === CfsFeatureScope.PinConfig) {\n      const formattedScope = scope.charAt(0).toUpperCase() + scope.slice(1);\n      const directives = this.cfsPluginInfo.properties?.[\n        scope\n      ] as unknown as ControlDirective;\n\n      const {\n        supportedControls,\n        addedControls,\n        removedControls,\n        modifiedControls,\n      } = directives ?? {};\n\n      let targetControls = [...controls[formattedScope]];\n\n      // Apply supported or removed controls\n      if (supportedControls) {\n        targetControls = targetControls.filter((control) =>\n          supportedControls.find(\n            (supportedControl) => control.Id === supportedControl.Id,\n          ),\n        );\n      } else if (removedControls) {\n        removedControls.forEach((removedControl) => {\n          targetControls = targetControls.filter(\n            (control) => control.Id !== removedControl.Id,\n          );\n        });\n      }\n\n      // Add controls\n      if (addedControls) {\n        addedControls.forEach((addedControl) => {\n          targetControls.push({\n            ...addedControl,\n            PluginOption: true,\n          } as SocControl);\n        });\n      }\n\n      // Modify controls\n      if (modifiedControls) {\n        modifiedControls.forEach((modifiedControl) => {\n          const controlIndex = targetControls.findIndex(\n            (control) => control.Id === modifiedControl.Id,\n          );\n\n          if (controlIndex !== -1) {\n            targetControls[controlIndex] = {\n              ...targetControls[controlIndex],\n              ...modifiedControl,\n            };\n          }\n        });\n      }\n\n      return { [formattedScope]: targetControls };\n    }\n\n    if (scope === CfsFeatureScope.ClockConfig) {\n      const result: Record<string, SocControl[]> = {};\n      const formattedScope = scope.charAt(0).toUpperCase() + scope.slice(1);\n\n      const directives = this.cfsPluginInfo.properties?.[\n        scope\n      ] as unknown as Record<string, ControlDirective>;\n\n      // Process each clock node\n      for (const clockNode of soc.ClockNodes) {\n        const nodeName = clockNode.Name;\n        const directive = directives[nodeName];\n\n        // Skip nodes that don't have a ConfigUIOrder property\n        if (clockNode.ConfigUIOrder === undefined) {\n          continue;\n        }\n\n        let nodeControls: SocControl[] = [];\n\n        if (controls[formattedScope] && clockNode.ConfigUIOrder) {\n          // Build nodeControls in the order defined by ConfigUIOrder\n          for (const controlId of clockNode.ConfigUIOrder) {\n            const control = controls[formattedScope].find(\n              (c) => c.Id === controlId,\n            );\n\n            if (control) {\n              nodeControls.push({ ...control });\n            }\n          }\n        }\n\n        // Apply directive modifications if present\n        if (directive && Object.keys(directive).length > 0) {\n          const {\n            supportedControls,\n            addedControls,\n            removedControls,\n            modifiedControls,\n            defaultOverrides,\n          } = directive;\n\n          // Apply supported or removed controls\n          if (supportedControls) {\n            nodeControls = nodeControls.filter((control) =>\n              supportedControls.find(\n                (supportedControl) => control.Id === supportedControl.Id,\n              ),\n            );\n          } else if (removedControls) {\n            removedControls.forEach((removedControl) => {\n              nodeControls = nodeControls.filter(\n                (control) => control.Id !== removedControl.Id,\n              );\n            });\n          }\n\n          // Add controls\n          if (addedControls) {\n            addedControls.forEach((addedControl) => {\n              nodeControls.push({\n                ...addedControl,\n                PluginOption: true,\n                ClockNode: nodeName,\n              } as SocControl);\n            });\n          }\n\n          // Modify controls\n          if (modifiedControls) {\n            modifiedControls.forEach((modifiedControl) => {\n              const controlIndex = nodeControls.findIndex(\n                (control) => control.Id === modifiedControl.Id,\n              );\n\n              if (controlIndex !== -1) {\n                nodeControls[controlIndex] = {\n                  ...nodeControls[controlIndex],\n                  ...modifiedControl,\n                };\n              }\n            });\n          }\n\n          if (defaultOverrides && soc) {\n            defaultOverrides.forEach((defaultOverride) => {\n              if (typeof defaultOverride.partRegexp === \"string\") {\n                const regexp = new RegExp(defaultOverride.partRegexp);\n\n                if (!regexp.test(soc.Name)) {\n                  return;\n                }\n              }\n\n              const controlIndex = nodeControls.findIndex(\n                (control) => control.Id === defaultOverride.Id,\n              );\n\n              if (controlIndex !== -1) {\n                nodeControls[controlIndex] = {\n                  ...nodeControls[controlIndex],\n                  Default: defaultOverride.Value,\n                };\n              }\n            });\n          }\n        }\n\n        if (nodeControls.length > 0) {\n          result[nodeName] = nodeControls;\n        }\n      }\n\n      return result;\n    }\n\n    return [];\n  }\n}\n"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI,eAAe;AAC1B,CAAC,UAAU,eAAe,EAAE;AAC5B;AACA;AACA;AACA,IAAI,eAAe,CAAC,WAAW,CAAC,GAAG,WAAW;AAC9C;AACA;AACA;AACA,IAAI,eAAe,CAAC,SAAS,CAAC,GAAG,SAAS;AAC1C;AACA;AACA;AACA,IAAI,eAAe,CAAC,SAAS,CAAC,GAAG,SAAS;AAC1C;AACA;AACA;AACA,IAAI,eAAe,CAAC,QAAQ,CAAC,GAAG,QAAQ;AACxC;AACA;AACA;AACA,IAAI,eAAe,CAAC,YAAY,CAAC,GAAG,YAAY;AAChD;AACA;AACA;AACA,IAAI,eAAe,CAAC,WAAW,CAAC,GAAG,WAAW;AAC9C;AACA;AACA;AACA,IAAI,eAAe,CAAC,aAAa,CAAC,GAAG,aAAa;AAClD,CAAC,EAAE,eAAe,GAAG,eAAe,KAAK,eAAe,GAAG,EAAE,CAAC,CAAC;;AC5C/D;;;;;;;;;;;;;AAaG;AAcH;;AAEG;MACU,sBAAsB,CAAA;AAKX,IAAA,aAAA;AAJtB;;;AAGG;AACH,IAAA,WAAA,CAAsB,aAA4B,EAAA;QAA5B,IAAa,CAAA,aAAA,GAAb,aAAa;;AAEnC;;;;;AAKG;IACH,gBAAgB,CACd,KAAsB,EACtB,GAAqB,EAAA;;;AAIrB,QAAA,IAAI,GAAG,KAAK,SAAS,EAAE;AACrB,YAAA,QACE,IAAI,CAAC,aAAa,CAAC,UAAU,GAAG,KAAK,CAAC,IAAK,EAA0B;;AAIzE,QAAA,MAAM,QAAQ,GAAiC,IAAI,CAAC,KAAK,CACvD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CACG;AAEjC,QAAA,IAAI,KAAK,KAAK,eAAe,CAAC,UAAU,EAAE;YACxC,OAAO,QAAQ,CAAC,WAAW;YAC3B,OAAO,QAAQ,CAAC,SAAS;YAEzB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,GAC9C,KAAK,CACyC;YAEhD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAC5C,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,KAAI;AACpC,gBAAA,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC;AAExC,gBAAA,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3C,oBAAA,MAAM,EACJ,iBAAiB,EACjB,aAAa,EACb,eAAe,EACf,gBAAgB,EAChB,gBAAgB,GACjB,GAAG,SAAS;AAEb,oBAAA,IAAI,0BAA0B,GAAG,CAAC,GAAG,cAAc,CAAC;;oBAGpD,IAAI,iBAAiB,EAAE;AACrB,wBAAA,0BAA0B,GAAG,0BAA0B,CAAC,MAAM,CAC5D,CAAC,OAAO,KACN,iBAAiB,CAAC,IAAI,CACpB,CAAC,gBAAgB,KAAK,OAAO,CAAC,EAAE,KAAK,gBAAgB,CAAC,EAAE,CACzD,CACJ;;yBACI,IAAI,eAAe,EAAE;AAC1B,wBAAA,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,KAAI;AACzC,4BAAA,0BAA0B,GAAG,0BAA0B,CAAC,MAAM,CAC5D,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,cAAc,CAAC,EAAE,CAC9C;AACH,yBAAC,CAAC;;;oBAIJ,IAAI,aAAa,EAAE;AACjB,wBAAA,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,KAAI;4BACrC,0BAA0B,CAAC,IAAI,CAAC;AAC9B,gCAAA,GAAG,YAAY;AACf,gCAAA,YAAY,EAAE,IAAI;AACL,6BAAA,CAAC;AAClB,yBAAC,CAAC;;;oBAIJ,IAAI,gBAAgB,EAAE;AACpB,wBAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,KAAI;AAC3C,4BAAA,MAAM,YAAY,GAAG,0BAA0B,CAAC,SAAS,CACvD,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAC/C;AACD,4BAAA,IAAI,YAAY,KAAK,EAAE,EAAE;gCACvB,0BAA0B,CAAC,YAAY,CAAC,GAAG;oCACzC,GAAG,0BAA0B,CAAC,YAAY,CAAC;AAC3C,oCAAA,GAAG,eAAe;iCACnB;;AAEL,yBAAC,CAAC;;;AAIJ,oBAAA,IAAI,gBAAgB,IAAI,GAAG,EAAE;AAC3B,wBAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,KAAI;AAC3C,4BAAA,IAAI,OAAO,eAAe,CAAC,UAAU,KAAK,QAAQ,EAAE;gCAClD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC;gCACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oCAC1B;;;AAIJ,4BAAA,MAAM,YAAY,GAAG,0BAA0B,CAAC,SAAS,CACvD,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAC/C;AAED,4BAAA,IAAI,YAAY,KAAK,EAAE,EAAE;gCACvB,0BAA0B,CAAC,YAAY,CAAC,GAAG;oCACzC,GAAG,0BAA0B,CAAC,YAAY,CAAC;oCAC3C,OAAO,EAAE,eAAe,CAAC,KAAK;iCAC/B;;AAEL,yBAAC,CAAC;;AAGJ,oBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,0BAA0B;;qBACvC;AACL,oBAAA,GAAG,CAAC,UAAU,CAAC,GAAG,cAAc;;AAElC,gBAAA,OAAO,GAAG;aACX,EACD,EAAkC,CACnC;AAED,YAAA,OAAO,MAAM;;;AAIf,QAAA,IAAI,KAAK,KAAK,eAAe,CAAC,MAAM,EAAE;YACpC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,GAC9C,KAAK,CACyB;YAChC,MAAM,cAAc,GAAiB,EAAE;AAEvC,YAAA,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa,EAAE;gBAC1C,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;oBAC3C,cAAc,CAAC,IAAI,CAAC;AAClB,wBAAA,GAAG,OAAO;AACV,wBAAA,YAAY,EAAE,IAAI;AACL,qBAAA,CAAC;AAClB,iBAAC,CAAC;;AAGJ,YAAA,OAAO,EAAE,CAAC,KAAK,GAAG,cAAc,EAAE;;;AAIpC,QAAA,IAAI,KAAK,KAAK,eAAe,CAAC,SAAS,EAAE;AACvC,YAAA,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACrE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,GAC9C,KAAK,CACyB;AAEhC,YAAA,MAAM,EACJ,iBAAiB,EACjB,aAAa,EACb,eAAe,EACf,gBAAgB,GACjB,GAAG,UAAU,IAAI,EAAE;YAEpB,IAAI,cAAc,GAAG,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;;YAGlD,IAAI,iBAAiB,EAAE;AACrB,gBAAA,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,KAC7C,iBAAiB,CAAC,IAAI,CACpB,CAAC,gBAAgB,KAAK,OAAO,CAAC,EAAE,KAAK,gBAAgB,CAAC,EAAE,CACzD,CACF;;iBACI,IAAI,eAAe,EAAE;AAC1B,gBAAA,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,KAAI;AACzC,oBAAA,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,cAAc,CAAC,EAAE,CAC9C;AACH,iBAAC,CAAC;;;YAIJ,IAAI,aAAa,EAAE;AACjB,gBAAA,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,KAAI;oBACrC,cAAc,CAAC,IAAI,CAAC;AAClB,wBAAA,GAAG,YAAY;AACf,wBAAA,YAAY,EAAE,IAAI;AACL,qBAAA,CAAC;AAClB,iBAAC,CAAC;;;YAIJ,IAAI,gBAAgB,EAAE;AACpB,gBAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,KAAI;AAC3C,oBAAA,MAAM,YAAY,GAAG,cAAc,CAAC,SAAS,CAC3C,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAC/C;AAED,oBAAA,IAAI,YAAY,KAAK,EAAE,EAAE;wBACvB,cAAc,CAAC,YAAY,CAAC,GAAG;4BAC7B,GAAG,cAAc,CAAC,YAAY,CAAC;AAC/B,4BAAA,GAAG,eAAe;yBACnB;;AAEL,iBAAC,CAAC;;AAGJ,YAAA,OAAO,EAAE,CAAC,cAAc,GAAG,cAAc,EAAE;;AAG7C,QAAA,IAAI,KAAK,KAAK,eAAe,CAAC,WAAW,EAAE;YACzC,MAAM,MAAM,GAAiC,EAAE;AAC/C,YAAA,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAErE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,GAC9C,KAAK,CACyC;;AAGhD,YAAA,KAAK,MAAM,SAAS,IAAI,GAAG,CAAC,UAAU,EAAE;AACtC,gBAAA,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI;AAC/B,gBAAA,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC;;AAGtC,gBAAA,IAAI,SAAS,CAAC,aAAa,KAAK,SAAS,EAAE;oBACzC;;gBAGF,IAAI,YAAY,GAAiB,EAAE;gBAEnC,IAAI,QAAQ,CAAC,cAAc,CAAC,IAAI,SAAS,CAAC,aAAa,EAAE;;AAEvD,oBAAA,KAAK,MAAM,SAAS,IAAI,SAAS,CAAC,aAAa,EAAE;wBAC/C,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAC3C,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,SAAS,CAC1B;wBAED,IAAI,OAAO,EAAE;4BACX,YAAY,CAAC,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC;;;;;AAMvC,gBAAA,IAAI,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAClD,oBAAA,MAAM,EACJ,iBAAiB,EACjB,aAAa,EACb,eAAe,EACf,gBAAgB,EAChB,gBAAgB,GACjB,GAAG,SAAS;;oBAGb,IAAI,iBAAiB,EAAE;AACrB,wBAAA,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,KACzC,iBAAiB,CAAC,IAAI,CACpB,CAAC,gBAAgB,KAAK,OAAO,CAAC,EAAE,KAAK,gBAAgB,CAAC,EAAE,CACzD,CACF;;yBACI,IAAI,eAAe,EAAE;AAC1B,wBAAA,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,KAAI;AACzC,4BAAA,YAAY,GAAG,YAAY,CAAC,MAAM,CAChC,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,cAAc,CAAC,EAAE,CAC9C;AACH,yBAAC,CAAC;;;oBAIJ,IAAI,aAAa,EAAE;AACjB,wBAAA,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,KAAI;4BACrC,YAAY,CAAC,IAAI,CAAC;AAChB,gCAAA,GAAG,YAAY;AACf,gCAAA,YAAY,EAAE,IAAI;AAClB,gCAAA,SAAS,EAAE,QAAQ;AACN,6BAAA,CAAC;AAClB,yBAAC,CAAC;;;oBAIJ,IAAI,gBAAgB,EAAE;AACpB,wBAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,KAAI;AAC3C,4BAAA,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CACzC,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAC/C;AAED,4BAAA,IAAI,YAAY,KAAK,EAAE,EAAE;gCACvB,YAAY,CAAC,YAAY,CAAC,GAAG;oCAC3B,GAAG,YAAY,CAAC,YAAY,CAAC;AAC7B,oCAAA,GAAG,eAAe;iCACnB;;AAEL,yBAAC,CAAC;;AAGJ,oBAAA,IAAI,gBAAgB,IAAI,GAAG,EAAE;AAC3B,wBAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,KAAI;AAC3C,4BAAA,IAAI,OAAO,eAAe,CAAC,UAAU,KAAK,QAAQ,EAAE;gCAClD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC;gCAErD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oCAC1B;;;AAIJ,4BAAA,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CACzC,CAAC,OAAO,KAAK,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAC/C;AAED,4BAAA,IAAI,YAAY,KAAK,EAAE,EAAE;gCACvB,YAAY,CAAC,YAAY,CAAC,GAAG;oCAC3B,GAAG,YAAY,CAAC,YAAY,CAAC;oCAC7B,OAAO,EAAE,eAAe,CAAC,KAAK;iCAC/B;;AAEL,yBAAC,CAAC;;;AAIN,gBAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,oBAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY;;;AAInC,YAAA,OAAO,MAAM;;AAGf,QAAA,OAAO,EAAE;;AAEZ;;;;"}