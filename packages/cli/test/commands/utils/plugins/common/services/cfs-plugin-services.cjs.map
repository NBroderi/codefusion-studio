{"version":3,"file":"cfs-plugin-services.cjs","sources":["../../../../common/services/cfs-plugin-services.ts"],"sourcesContent":["/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsFeatureScope,\n  CfsFileMap,\n  CfsPluginProperty,\n  CfsSocDataModel,\n  SocControl,\n} from \"cfs-plugins-api\";\n\nexport enum CfsPluginServiceType {\n  CopyFiles = \"copyFiles\",\n  Template = \"template\",\n  SocControlOverride = \"socControlOverride\",\n}\n\nexport interface CfsCopyFilesService {\n  /**\n   * Copy files defined in the .cfsplugin info file to their output directory\n   * @param files - The files to copy\n   * @param parentDir - The parent directory to copy files into (optional)\n   */\n  copyFiles(files: CfsFileMap[], parentDir?: string): Promise<void>;\n}\n\nexport interface CfsTemplateService {\n  /**\n   * Run eta on all templates defined in the .cfsplugin info file and write the contents to the specified output directory\n   * @param files - The template files to copy\n   * @param data - The data needed for rendering eta templates.\n   * @param parentDir - The parent directory to copy files into (optional)\n   */\n  renderTemplates(\n    templates: CfsFileMap[],\n    data: Record<string, unknown>,\n    baseDir?: string,\n  ): Promise<string[]>;\n}\n\nexport interface ControlDirective {\n  supportedControls?: Record<\"Id\", string>[];\n  removedControls?: Record<\"Id\", string>[];\n  addedControls?: SocControl[];\n  modifiedControls?: SocControl[];\n  defaultOverrides?: {\n    Id: string;\n    Value: string | number;\n    partRegexp?: string;\n  }[];\n}\n\nexport interface CfsSocControlsOverrideService {\n  /**\n   * Override Soc controls following a set of directives provided in the plugin info.\n   * @param scope - The scope of properties to retrieve (Peripheral, PinConfig, etc.)\n   * @param soc - Optional SoC data model containing control definitions\n   * @returns The properties with control directives applied\n   */\n  overrideControls(\n    scope: CfsFeatureScope,\n    soc?: CfsSocDataModel,\n  ): Record<string, SocControl[]> | CfsPluginProperty[];\n}\n"],"names":["CfsPluginServiceType"],"mappings":";;AAAA;;;;;;;;;;;;;AAaG;AAUSA;AAAZ,CAAA,UAAY,oBAAoB,EAAA;AAC9B,IAAA,oBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;AACvB,IAAA,oBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;AACrB,IAAA,oBAAA,CAAA,oBAAA,CAAA,GAAA,oBAAyC;AAC3C,CAAC,EAJWA,4BAAoB,KAApBA,4BAAoB,GAI/B,EAAA,CAAA,CAAA;;"}