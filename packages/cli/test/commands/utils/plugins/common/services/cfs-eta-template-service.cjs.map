{"version":3,"file":"cfs-eta-template-service.cjs","sources":["../../../../common/utilities/cfs-utilities.ts","../../../../common/services/cfs-eta-template-service.ts"],"sourcesContent":["/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Evaluates a template string with nested template literals\n * @param template - The template string to evaluate\n * @param context - The context to evaluate the template literal from\n * @returns a function to evaluate the template string\n */\nexport function evalNestedTemplateLiterals(\n  template: string,\n  context: any,\n): string {\n  return new Function(\"context\", `return \\`${template}\\`;`)(context);\n}\n\n/**\n * Converts a string to title case\n * @param str - The string to convert to title case\n * @returns The string in title case\n */\nexport function titleCase(str: string) {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsFileMap } from \"cfs-plugins-api\";\nimport { Eta, type EtaError } from \"eta\";\nimport { promises as fsp } from \"fs\";\nimport { glob } from \"glob\";\nimport path from \"path\";\nimport { CfsTemplateService } from \"./cfs-plugin-services.js\";\nimport { evalNestedTemplateLiterals } from \"../utilities/cfs-utilities.js\";\n\nexport class CfsEtaTemplateService implements CfsTemplateService {\n  /**\n   * Constructor\n   * @param pluginPath - The path to the plugin.\n   * @param context - The context for rendering the templates.\n   */\n  constructor(\n    protected pluginPath: string,\n    protected context: Record<string, unknown>,\n  ) {}\n\n  async renderTemplates(\n    templates: CfsFileMap[],\n    data: Record<string, unknown>,\n    baseDir?: string,\n  ): Promise<string[]> {\n    const pluginsAbsolutePath = path.resolve(this.pluginPath, \"..\");\n    const filesCreated: string[] = [];\n\n    for (const template of templates) {\n      const eta = new Eta({\n        views: pluginsAbsolutePath,\n        // By default ETA uses XMLEscape, which maps special HTML characters\n        // (&, <, >, \", ') to their XML-escaped equivalents. We do not want\n        // that for code generation.\n        escapeFunction: String,\n      });\n      // Read note in cfs-fs-copy-files-service.ts\n      const location = (baseDir ?? data.path ?? \"\") as string;\n\n      try {\n        let dstPath = evalNestedTemplateLiterals(template.dst, data);\n\n        // Check if context is CfsWorkspace and make dst path relative to CfsWorkspace.location\n        if (location) {\n          dstPath = path.join(location, dstPath).replace(/\\\\/g, \"/\");\n        } else {\n          dstPath = template.dst;\n        }\n\n        const fullPath = path\n          .join(this.pluginPath, template.src)\n          .replace(/\\\\/g, \"/\");\n\n        const files = await glob(fullPath);\n\n        for (const file of files) {\n          const fileName = path.basename(file.replace(\".eta\", \"\"));\n\n          const relativePath = path\n            .relative(pluginsAbsolutePath, file)\n            .replace(/\\\\/g, \"/\");\n\n          const rendered = eta.render(relativePath, {\n            ...data,\n            timestamp: new Date().toISOString(),\n          });\n\n          const isFile = path.extname(dstPath) !== \"\";\n\n          if (!isFile) {\n            await fsp.mkdir(dstPath, { recursive: true });\n            dstPath = path.join(dstPath, fileName);\n          } else {\n            await fsp.mkdir(path.dirname(dstPath), { recursive: true });\n          }\n          await fsp.writeFile(dstPath, rendered);\n          filesCreated.push(dstPath);\n        }\n      } catch (error) {\n        console.error(\"Eta context:\", data);\n        throw new Error(\n          `Failed to render template from ${template.src} to ${template.dst}: ${\n            (error as EtaError).message || error\n          }`,\n        );\n      }\n    }\n    return filesCreated;\n  }\n}\n"],"names":["eta","Eta","glob","fsp"],"mappings":"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"}