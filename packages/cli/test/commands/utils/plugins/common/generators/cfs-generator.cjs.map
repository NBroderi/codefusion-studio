{"version":3,"file":"cfs-generator.cjs","sources":["../../../../common/generators/cfs-generator.ts"],"sourcesContent":["/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsFeature,\n  CfsProject,\n  CfsWorkspace,\n  CfsConfig,\n} from \"cfs-plugins-api\";\nimport { CfsPluginServiceType } from \"../services/cfs-plugin-services.js\";\nimport { CfsPluginServiceProvider } from \"../services/cfs-plugin-service-provider.js\";\n\nexport abstract class CfsGenerator implements CfsPluginServiceProvider {\n  /**\n   * Constructor\n   * @param pluginPath - The path to the plugin.\n   * @param cfsFeature - The feature information required for code generation.\n   * @param context - The workspace information required for code generation.\n   */\n  constructor(\n    protected pluginPath: string,\n    protected cfsFeature: CfsFeature,\n    protected context: CfsWorkspace | CfsProject | CfsConfig\n  ) {}\n\n  /**\n   * Gets the service (ex: CfsCopyFilesService, EtaTemplateService)\n   * @param service - The name of the service to retrieve (ex: \"copyFiles\", \"template\")\n   * @returns An instance of the requested service type.\n   */\n  abstract getService<T>(service: CfsPluginServiceType): T;\n}\n"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;AAaG;MAWmB,YAAY,CAAA;AAQpB,IAAA,UAAA;AACA,IAAA,UAAA;AACA,IAAA,OAAA;AATZ;;;;;AAKG;AACH,IAAA,WAAA,CACY,UAAkB,EAClB,UAAsB,EACtB,OAA8C,EAAA;QAF9C,IAAU,CAAA,UAAA,GAAV,UAAU;QACV,IAAU,CAAA,UAAA,GAAV,UAAU;QACV,IAAO,CAAA,OAAA,GAAP,OAAO;;AASpB;;;;"}