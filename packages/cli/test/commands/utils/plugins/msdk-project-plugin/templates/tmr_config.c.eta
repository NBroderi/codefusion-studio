<%
/**
 * Copyright (c) 2025 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Include common plugin code
eval(this.render("common/utilities/utilities.js"));

// Return the TMR mode.
function getTmrMode(instance, ctrl) {
  let mode = getAssignedPeripheral(instance).Config?.[ctrl] ?? "ONE_SHOT";
  // A couple of them use different names to those of the enum.
  switch (mode) {
    case "ONE_SHOT":
      mode = "ONESHOT";
      break;
    case "CAPCOMP":
      mode = "CAPTURE_COMPARE";
      break;
  }
  return mode;
}

// Return the TMR prescaler.
function getTmrPrescaler(instance, ctrl) {
  return getAssignedPeripheral(instance).Config?.[ctrl] ?? 1;
}

// Return the TMR polarity.
function getTmrPolarity(instance, ctrl) {
  return getAssignedPeripheral(instance).Config?.[ctrl] === "POLARITY_1" ? 1 : 0;
}

// Return the TMR compare value.
function getTmrCompare(instance, unit) {
  let value;
  if (unit === "A") {
    value = getAssignedPeripheral(instance).Config?.COMPARE;
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.COMPARE_SINGLE;
    }
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.COMPARE_A ?? 0;
    }
  } else {
    value = getAssignedPeripheral(instance).Config?.COMPARE_B ?? 0;
  }
  return 0;
}

// Return the TMR count value.
function getTmrCount(instance, unit) {
  let value;
  if (unit === "A") {
    value = getAssignedPeripheral(instance).Config?.COUNT;
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.COUNT_SINGLE;
    }
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.COUNT_A ?? 0;
    }
  } else {
    value = getAssignedPeripheral(instance).Config?.COUNT_B ?? 0;
  }
  return 0;
}

// Return the TMR PWM value.
function getTmrPWM(instance, unit) {
  let value;
  if (unit === "A") {
    value = getAssignedPeripheral(instance).Config?.PWM;
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.PWM_SINGLE;
    }
    if (typeof value === "undefined") {
      value = getAssignedPeripheral(instance).Config?.PWM_A ?? 0;
    }
  } else {
    value = getAssignedPeripheral(instance).Config?.PWM_B ?? 0;
  }
  return 0;
}

// Return the clock source for the timer.
function getTmrClockSource(instance, ctrl) {
  let src = getClockSetting(instance.clocknode, ctrl) ?? "PCLK";
  switch (src) {
    case "APBCLK":
    case "PCLK":
      src = "APB";
      break;
    case "LPTMR0_CLK":
    case "LPTMR1_CLK":
      src = "EXT";
      break;
  }
  return src;
}
%>
<% if (getAssignedPeripheral(it.instance)) { %>
  { /* Configure <%= it.instance %>.
<%   if (getPeripheralDescription(it.instance)) { %>
     * This peripheral is used for <%= getPeripheralDescription(it.instance) %>.
<%   } %>
<%   if (!isClockSetTo(it.clocknode, it.enable, "TRUE")) { %>
     * Note: This peripheral was not enabled on the clock configuration canvas.
     * Nonetheless, as a result of the following configuration, the peripheral will be
     * clocked on.
<%   } %>
     */
    mxc_tmr_cfg_t <%= it.instance.toLowerCase() %>_config_a = {
      MXC_TMR_PRES_<%= getTmrPrescaler(it.instance, "CLKDIV_A") %>,
      MXC_TMR_MODE_<%= getTmrMode(it.instance, "MODE_A") %>,
<%   if (it.datamodel.Name !== "MAX32650" && it.datamodel.Name !== "MAX32660" && it.datamodel.Name !== "MAX32666") { %>
<%     if (getAssignedPeripheral(it.instance).Config?.CONFIGURATION === "SINGLE_32BIT") { %>
      MXC_TMR_BIT_MODE_32,
<%     } else { %>
      MXC_TMR_BIT_MODE_16A,
<%     } %>
      MXC_TMR_<%= getTmrClockSource(it.instance, it.instance.muxa) %>_CLK,
<%   } %>
      <%= getTmrCompare(it.instance, "A") %>U, /* compare value */
      <%= getTmrPolarity(it.instance, "POL_A") %> /* polarity */
    };

    /* Initialize the peripheral. */
<%   if (it.datamodel.Name !== "MAX32650" && it.datamodel.Name === "MAX32665") { %>
    MXC_TMR_Init(MXC_<%= it.msdk_instance ?? it.instance %>,
<%   } else { %>
    result = MXC_TMR_Init(MXC_<%= it.msdk_instance ?? it.instance %>,
<%   } %>
<%   if (it.datamodel.Name === "MAX32662") { %>
                          &<%= it.instance.toLowerCase() %>_config_a,
                          false, /*init_pins*/
                          MAP_A  /*dummy*/);
<%   } else if (it.datamodel.Name === "MAX32650" || it.datamodel.Name === "MAX32660" || it.datamodel.Name === "MAX32665") { %>
                          &<%= it.instance.toLowerCase() %>_config_a);
<%   } else { %>
                          &<%= it.instance.toLowerCase() %>_config_a,
                          false /*init_pins*/);
<%   } %>
<%   if (it.datamodel.Name !== "MAX32650" && it.datamodel.Name === "MAX32665") { %>
    if (result != E_NO_ERROR) {
      return result;
    }
<%   } %>
<%   if (getAssignedPeripheral(it.instance).Config?.CONFIGURATION !== "DUAL_16BIT") { %>

    /* Set the Count. */
    MXC_TMR_SetCount(MXC_<%= it.msdk_instance ?? it.instance %>, <%= getTmrCount(it.instance, "A") %>U);

    /* Set the PWM. */
    result = MXC_TMR_SetPWM(MXC_<%= it.msdk_instance ?? it.instance %>, <%= getTmrPWM(it.instance, "A") %>U);
    if (result != E_NO_ERROR) {
      return result;
    }
<%   } else { %>

    mxc_tmr_cfg_t <%= it.instance.toLowerCase() %>_config_b = {
      MXC_TMR_PRES_<%= getTmrPrescaler(it.instance, "CLKDIV_B") %>,
      MXC_TMR_MODE_<%= getTmrMode(it.instance, "MODE_B") %>,
      MXC_TMR_BIT_MODE_16B,
      MXC_TMR_<%= getTmrClockSource(it.instance, it.instance.muxb) %>_CLK,
      <%= getTmrCompare(it.instance, "B") %>U, /* compare value */
      <%= getTmrPolarity(it.instance, "POL_B") %> /* polarity */
    };

    /* Initialize the peripheral. */
    result = MXC_TMR_Init(MXC_<%= it.msdk_instance ?? it.instance %>,
                          &<%= it.instance.toLowerCase() %>_config_b,
                          false);
    if (result != E_NO_ERROR) {
      return result;
    }
<%   } %>
  }

<% } %>
