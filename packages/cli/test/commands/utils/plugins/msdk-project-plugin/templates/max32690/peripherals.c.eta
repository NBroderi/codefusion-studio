<%
/**
 * Copyright (c) 2024-2025 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Include common plugin code
eval(this.render("common/utilities/utilities.js"));

function tmrModeA(node, ctrl) {
  if (isClockSet(node, ctrl)) {
    const value = getClockSetting(node, ctrl);
    if (value !== "32BIT") {
      return "16A";
    }
  }
  return "32";
}

function modifiesSysClk() {
  return (isClockSet("SYS_OSC Mux", "MUX") || isClockSet("PRESCALER", "DIV"));
}

%>
int ClockInit(void) {
<% if (it.cfsconfig.ClockNodes.length > 0 || getProject().Peripherals?.length > 0) { %>
  int result = E_NO_ERROR;

<% if (isClockSetTo("SYS_OSC Mux", "MUX", "CLKEXT")) { %>
  /* SYS_OSC Mux: Clock Source is set to External Clock on P0.23. */
  result = MXC_SYS_Clock_Select(MXC_SYS_CLOCK_EXTCLK);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } else if (isClockSet("SYS_OSC Mux", "MUX")) { %>
  /* SYS_OSC Mux: Clock Source is set to <%= getClockSettingDesc("SYS_OSC Mux", "MUX") %>. */
  result = MXC_SYS_Clock_Select(MXC_SYS_CLOCK_<%= getClockSetting("SYS_OSC Mux", "MUX") %>);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSet("PRESCALER", "DIV")) { %>
  /* PRESCALER: Divider Value is set to <%= getClockSettingDesc("PRESCALER", "DIV") %>. */
  MXC_SYS_SetClockDiv(MXC_SYS_CLOCK_DIV_<%= getClockSetting("PRESCALER", "DIV") %>);

<% } %>
<% if (isClockSetTo("IPO", "CALIBRATE", "TRUE")) { %>
  /* IPO: Calibrate the Oscillator. */
  result = MXC_SYS_ClockCalibrate(MXC_SYS_CLOCK_IPO);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("1-WIRE", "ENABLE", "TRUE")) { %>
  /* 1-WIRE: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_OWIRE);

<% } %>
<% if (isClockSetTo("ADC", "ENABLE", "TRUE")) { %>
  /* ADC: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_ADC);

<% } %>
<% if (isClockSetTo("ADC", "MUX", "SYS_CLK")) { %>
  /* ADC: Clock Source is set to SYS_CLK (System Clock). */
  result = MXC_ADC_SetClockSource(MXC_ADC_CLK_SYS_OSC);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("ADC", "MUX", "IBRO")) { %>
  /* ADC: Clock Source is set to IBRO (Internal Baud Rate Osc.). */
  result = MXC_ADC_SetClockSource(MXC_ADC_CLK_IBRO);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("ADC", "MUX", "ERFO")) { %>
  /* ADC: Clock Source is set to ERFO (External RF Osc.). */
  result = MXC_ADC_SetClockSource(MXC_ADC_CLK_ERFO);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("ADC", "MUX", "ADC_CLK_EXT")) { %>
  /* ADC: Clock Source is set to External Clock on P0.9. */
  result = MXC_ADC_SetClockSource(MXC_ADC_CLK_EXT);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSet("ADC", "DIV")) { %>
  /* ADC: Divider Value is set to <%= getClockSettingDesc("ADC", "DIV") %>. */
  MXC_ADC_SetClockDiv(MXC_ADC_CLKDIV_<%= getClockSetting("ADC", "DIV") %>);

<% } %>
<% if (isClockSetTo("Bluetooth", "ENABLE", "TRUE")) { %>
  /* Bluetooth: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_BTLE);

<% } %>
<% if (isClockSetTo("CAN0/1", "CAN0_ENABLE", "TRUE")) { %>
  /* CAN0/1: Enable the CAN0 Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_CAN0);

<% } %>
<% if (isClockSetTo("CAN0/1", "CAN1_ENABLE", "TRUE")) { %>
  /* CAN0/1: Enable the CAN1 Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_CAN1);

<% } %>
<% if (isClockSetTo("CTB/TRNG", "CTB_ENABLE", "TRUE")) { %>
  /* CTB/TRNG: Enable the CTB Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_CRYPTO);

<% } %>
<% if (isClockSetTo("CTB/TRNG", "TRNG_ENABLE", "TRUE")) { %>
  /* CTB/TRNG: Enable the TRNG Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_TRNG);

<% } %>
<% if (isClockSetTo("DMA", "ENABLE", "TRUE")) { %>
  /* DMA: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_DMA);

<% } %>
<% if (isClockSetTo("ERFO Mux", "MUX", "ERFO_CLK")) { %>
  /* ERFO Mux: Clock Source is set to External Clock on HFXIN. */
  result = MXC_SYS_SetBypass(MXC_SYS_CLOCK_ERFO, true);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("ERFO Mux", "MUX", "ERFO_OSC")) { %>
  /* ERFO Mux: Clock Source is set to ERFO (External RF Osc.). */
  result = MXC_SYS_SetBypass(MXC_SYS_CLOCK_ERFO, false);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("ERTCO Mux", "MUX", "ERTCO_CLK")) { %>
  /* ERTCO Mux: Clock Source is set to External Clock on 32KIN. */
  result = MXC_SYS_SetBypass(MXC_SYS_CLOCK_ERTCO, true);

<% } %>
<% if (isClockSetTo("ERTCO Mux", "MUX", "ERTCO_OSC")) { %>
  /* ERTCO Mux: Clock Source is set to ERTCO (External RTC Osc.). */
  result = MXC_SYS_SetBypass(MXC_SYS_CLOCK_ERTCO, false);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("High-Speed USB", "ENABLE", "TRUE")) { %>
  /* High-Speed USB: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_USB);

<% } %>
<% if (isClockSetTo("High-Speed USB", "USB_MUX", "SYS_CLK_DIV_10")) { %>
  /* High-Speed USB: Clock Source for USB PHY is set to SYS_CLK divided by 10. */
  result = MXC_USB_SetClockSource(MXC_USB_CLOCK_SYS_DIV_10);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("High-Speed USB", "USB_MUX", "ERFO")) { %>
  /* High-Speed USB: Clock Source for USB PHY is set to ERFO (External RF Osc.). */
  result = MXC_USB_SetClockSource(MXC_USB_CLOCK_ERFO);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("High-Speed USB", "USB_MUX", "USBCLKEXT")) { %>
  /* High-Speed USB: Clock Source for USB PHY is set to USBCLKEXT on P0.27. */
  result = MXC_USB_SetClockSource(MXC_USB_CLOCK_EXTCLK);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<% if (isClockSetTo("I2S", "ENABLE", "TRUE")) { %>
  /* I2S: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2S);

<% } %>
<% if (isClockSetTo("ICC", "ENABLE", "TRUE")) { %>
  /* ICC: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_SYSCACHE);
  MXC_ICC_Enable(MXC_ICC0);
  MXC_ICC_Enable(MXC_ICC1);

<% } %>
<% if (isClockSetTo("LPCOMP", "ENABLE", "TRUE")) { %>
  /* LPCOMP: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_LPCOMP);

<% } %>
<% if (isClockSetTo("PT0-15", "ENABLE", "TRUE")) { %>
  /* PT0-15: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_PT);

<% } %>
<% if (isClockSetTo("PUF", "ENABLE", "TRUE")) { %>
  /* PUF: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_PUF);

<% } %>
<% if (isClockSetTo("RISC-V", "ENABLE", "TRUE")) { %>
  /* RISC-V: Enable the Component Clock. */
  /* The RISC-V clock is enabled when MXC_SYS_RISCVRun is called in the application. */

<% } %>
<% if (isClockSetTo("LPM Mux", "MUX", "SYS_CLK_DIV_2_ISO")) { %>
  /* LPM Mux: Clock Source is set to SYS_CLK/2 (ISO when in LPM). */
  MXC_LP_RISCVClockSelect(MXC_LP_RISCV_CLOCK_ISO);

<% } %>
<% if (isClockSetTo("LPM Mux", "MUX", "SYS_CLK_DIV_2")) { %>
  /* LPM Mux: Clock Source is set to SYS_CLK/2. */
  MXC_LP_RISCVClockSelect(MXC_LP_RISCV_CLOCK_PCLK);

<% } %>
<% if (isClockSetTo("SEMA", "ENABLE", "TRUE")) { %>
  /* SEMA: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_SMPHR);

<% } %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI0", clock: "PeripheralClock", clocknode: "SPI0", enable: "SPI0_ENABLE" }) %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI0", clock: "PeripheralClock", clocknode: "SPI0/1/2", enable: "SPI0_ENABLE" }) %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI1", clock: "PeripheralClock", clocknode: "SPI0/1/2", enable: "SPI1_ENABLE" }) %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI2", clock: "PeripheralClock", clocknode: "SPI0/1/2", enable: "SPI2_ENABLE" }) %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI3", clock: "SystemCoreClock", clocknode: "SPI3/4",   enable: "SPI3_ENABLE" }) %>
<%~ include("../spi_config.c.eta", { ...it, instance: "SPI4", clock: "SystemCoreClock", clocknode: "SPI3/4",   enable: "SPI4_ENABLE" }) %>
<% if (isClockSetTo("SPIXF", "ENABLE", "TRUE")) { %>
  /* SPIXF: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_SPIXIP);
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_SPIXIPC);

<% } %>
<% if (isClockSetTo("SPIXR/HPB", "ENABLE", "TRUE")) { %>
  /* SPIXR/HPB: Enable the Component Clock. */
  MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_HPB);

<% } %>
<% if (isClockSet("SQWOUT", "SQWOUT") && getClockSetting("SQWOUT", "SQWOUT") !== "DIS") { %>
  /* SQWOUT: Frequency on Output Pin is set to <%= getClockSettingDesc("SQWOUT", "SQWOUT") %>. */
  result = MXC_RTC_SquareWaveStart(MXC_RTC_F_<%= getClockSetting("SQWOUT", "SQWOUT") %>);
  if (result != E_NO_ERROR) {
    return result;
  }

<% } %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "TMR0", clocknode: "TMR0/1/2/3", enable: "TMR0_ENABLE", muxa: "TMR0a_MUX", muxb: "TMR0b_MUX", clock_default: "PCLK" }) %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "TMR1", clocknode: "TMR0/1/2/3", enable: "TMR1_ENABLE", muxa: "TMR1a_MUX", muxb: "TMR1b_MUX", clock_default: "PCLK" }) %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "TMR2", clocknode: "TMR0/1/2/3", enable: "TMR2_ENABLE", muxa: "TMR2a_MUX", muxb: "TMR2b_MUX", clock_default: "PCLK" }) %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "TMR3", clocknode: "TMR0/1/2/3", enable: "TMR3_ENABLE", muxa: "TMR3a_MUX", muxb: "TMR3b_MUX", clock_default: "PCLK" }) %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "LPTMR0", msdk_instance: "TMR4", clocknode: "LPTMR0", enable: "ENABLE", muxa: "MUX", clock_default: "IBRO" }) %>
<%~ include("../tmr_config.c.eta", { ...it, instance: "LPTMR1", msdk_instance: "TMR5", clocknode: "LPTMR1", enable: "ENABLE", muxa: "MUX", clock_default: "IBRO" }) %>
<%~ include("../uart_config.c.eta", { ...it, instance: "UART0", clocknode: "UART0/1/2", enable: "UART0_ENABLE", mux: "UART0_MUX", clock_default: "PCLK" }) %>
<%~ include("../uart_config.c.eta", { ...it, instance: "UART1", clocknode: "UART0/1/2", enable: "UART1_ENABLE", mux: "UART1_MUX", clock_default: "PCLK" }) %>
<%~ include("../uart_config.c.eta", { ...it, instance: "UART2", clocknode: "UART0/1/2", enable: "UART2_ENABLE", mux: "UART2_MUX", clock_default: "PCLK" }) %>
<%~ include("../uart_config.c.eta", { ...it, instance: "LPUART0", msdk_instance: "UART3", clocknode: "LPUART0", enable: "ENABLE", mux: "MUX", clock_default: "IBRO" }) %>
<%~ include("../i2c_config.c.eta", { ...it, instance: "I2C0", clock: "PeripheralClock", clocknode: "I2C0/2", enable: "I2C0_ENABLE" }) %>
<%~ include("../i2c_config.c.eta", { ...it, instance: "I2C2", clock: "PeripheralClock", clocknode: "I2C0/2", enable: "I2C2_ENABLE" }) %>
<%~ include("../i2c_config.c.eta", { ...it, instance: "I2C0", clock: "PeripheralClock", clocknode: "I2C0/1/2", enable: "I2C0_ENABLE" }) %>
<%~ include("../i2c_config.c.eta", { ...it, instance: "I2C1", clock: "PeripheralClock", clocknode: "I2C0/1/2", enable: "I2C1_ENABLE" }) %>
<%~ include("../i2c_config.c.eta", { ...it, instance: "I2C2", clock: "PeripheralClock", clocknode: "I2C0/1/2", enable: "I2C2_ENABLE" }) %>
<%~ include("../wdt_config.c.eta", { ...it, instance: "WDT0", msdk_instance: "WDT0", clocknode: "WDT0", enable: "ENABLE", clock_default: "PCLK" }) %>
<%~ include("../wdt_config.c.eta", { ...it, instance: "WDT1", msdk_instance: "WDT1", clocknode: "LPWDT0", enable: "ENABLE", clock_default: "IBRO" }) %>
<% if (isClockAnySet("ADC") || isClockAnySet("High-Speed USB")) { %>
  /* Lock the clock configuration for enabled peripherals. */
<%   if (isClockSetTo("ADC", "ENABLE", "TRUE")) { %>
  MXC_ADC_LockClockSource(true);
<%   } %>
<%   if (isClockSetTo("High-Speed USB", "ENABLE", "TRUE")) { %>
  MXC_USB_LockClockSource(true);
<%   } %>

<% } %>
<% if (modifiesSysClk()) { %>
  /* Update the System Core Clock as core clock settings have changed. */
  SystemCoreClockUpdate();

<% } %>
<% if (getAssignedPeripheral("CM4 SysTick")?.Config?.ENABLE == "TRUE") { %>
  result = SysTick_Config(<%= getAssignedPeripheral("CM4 SysTick").Config.TICKS_PER_INT %>);
  if (result != 0U) {
    return result;
  }

<% } %>
  return result;
<% } else { %>
  /* Clock configuration in default state. */

  return E_NO_ERROR;
<% } %>
}
