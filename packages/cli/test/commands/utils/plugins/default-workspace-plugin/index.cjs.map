{"version":3,"file":"index.cjs","sources":["../../../api/dist/src/cfs-plugin.js","../../../api/dist/src/types/cfs-feature.js","../../../common/utilities/cfs-utilities.ts","../../../common/services/cfs-eta-template-service.ts","../../../common/services/cfs-fs-copy-files-service.ts","../../../common/services/cfs-plugin-services.ts","../../../common/generators/cfs-generator.ts","../../../common/generators/eta/cfs-eta-generator.ts","../../../common/generators/eta/cfs-eta-workspace-generator.ts","../../../common/generators/eta/cfs-eta-project-generator.ts","../../../common/generators/eta/cfs-eta-code-generator.ts","../../../default-workspace-plugin/index.ts"],"sourcesContent":["/**\n *\n * Copyright (c) 2024-2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexport class CfsPlugin {\n    cfsPluginInfo;\n    context;\n    /**\n     * Constructor\n     * @param cfsPluginInfo - The .cfsplugin file contents\n     * @param context - The context for this plugin\n     */\n    constructor(cfsPluginInfo, context) {\n        this.cfsPluginInfo = cfsPluginInfo;\n        this.context = context;\n    }\n    /** Plugin Properties */\n    /**\n     * Get all properties supported by the plugin. These are shown in the UI and passed back to the plugin via \"setProperty\"\n     * @param scope - The scope of the properties to retrieve, such as \"workspace\", \"project\", \"code\", or \"memory\".\n     * @returns The properties supported by the plugin.\n     */\n    getProperties(scope) {\n        if (!(scope in (this.cfsPluginInfo.properties ?? {}))) {\n            console.error(`Plugin ${this.cfsPluginInfo.pluginName} does not support properties for scope ${scope}`);\n            return [];\n        }\n        return this.cfsPluginInfo.properties?.[scope] ?? [];\n    }\n    /** Environment Variables */\n    /**\n     * Pass environment variables from CFS to the plugin. This will include the CFS PATH and ZEPHYR variables.\n     * @param env - The environment variables to set in a Key-Value pair.\n     */\n    setEnvironmentVariables(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    env) {\n        // do nothing by default\n    }\n    /** Logging */\n    /**\n     * Write an info message to the plugin logs\n     */\n    log(message) {\n        // TODO: Write to a plugin log file\n        console.log(message);\n    }\n    /**\n     * Write a warning message to the plugin logs\n     */\n    warn(message) {\n        // TODO: Write to a plugin log file\n        console.warn(message);\n    }\n    /**\n     * Write an error message to the plugin logs\n     */\n    error(message) {\n        // TODO: Write to a plugin log file\n        console.error(message);\n    }\n}\n","/**\n *\n * Copyright (c) 2024-2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nexport var CfsFeatureScope;\n(function (CfsFeatureScope) {\n    /**\n     * Feature scope relating to workspace generation\n     */\n    CfsFeatureScope[\"Workspace\"] = \"workspace\";\n    /**\n     * Feature scope relating to project generation\n     */\n    CfsFeatureScope[\"Project\"] = \"project\";\n    /**\n     * Feature scope relating to code generation\n     */\n    CfsFeatureScope[\"CodeGen\"] = \"codegen\";\n    /**\n     * Feature scope relating to memory allocation\n     */\n    CfsFeatureScope[\"Memory\"] = \"memory\";\n    /**\n     * Feature scope relating to peripheral configuration\n     */\n    CfsFeatureScope[\"Peripheral\"] = \"peripheral\";\n    /**\n     * Feature scope relating to Pin configuration\n     */\n    CfsFeatureScope[\"PinConfig\"] = \"pinConfig\";\n    /**\n     * Feature scope relating to clock configuration\n     */\n    CfsFeatureScope[\"ClockConfig\"] = \"clockConfig\";\n})(CfsFeatureScope = CfsFeatureScope || (CfsFeatureScope = {}));\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Evaluates a template string with nested template literals\n * @param template - The template string to evaluate\n * @param context - The context to evaluate the template literal from\n * @returns a function to evaluate the template string\n */\nexport function evalNestedTemplateLiterals(\n  template: string,\n  context: any,\n): string {\n  return new Function(\"context\", `return \\`${template}\\`;`)(context);\n}\n\n/**\n * Converts a string to title case\n * @param str - The string to convert to title case\n * @returns The string in title case\n */\nexport function titleCase(str: string) {\n  return str\n    .toLowerCase()\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsFileMap } from \"cfs-plugins-api\";\nimport { Eta, type EtaError } from \"eta\";\nimport { promises as fsp } from \"fs\";\nimport { glob } from \"glob\";\nimport path from \"path\";\nimport { CfsTemplateService } from \"./cfs-plugin-services.js\";\nimport { evalNestedTemplateLiterals } from \"../utilities/cfs-utilities.js\";\n\nexport class CfsEtaTemplateService implements CfsTemplateService {\n  /**\n   * Constructor\n   * @param pluginPath - The path to the plugin.\n   * @param context - The context for rendering the templates.\n   */\n  constructor(\n    protected pluginPath: string,\n    protected context: Record<string, unknown>,\n  ) {}\n\n  async renderTemplates(\n    templates: CfsFileMap[],\n    data: Record<string, unknown>,\n    baseDir?: string,\n  ): Promise<string[]> {\n    const pluginsAbsolutePath = path.resolve(this.pluginPath, \"..\");\n    const filesCreated: string[] = [];\n\n    for (const template of templates) {\n      const eta = new Eta({\n        views: pluginsAbsolutePath,\n        // By default ETA uses XMLEscape, which maps special HTML characters\n        // (&, <, >, \", ') to their XML-escaped equivalents. We do not want\n        // that for code generation.\n        escapeFunction: String,\n      });\n      // Read note in cfs-fs-copy-files-service.ts\n      const location = (baseDir ?? data.path ?? \"\") as string;\n\n      try {\n        let dstPath = evalNestedTemplateLiterals(template.dst, data);\n\n        // Check if context is CfsWorkspace and make dst path relative to CfsWorkspace.location\n        if (location) {\n          dstPath = path.join(location, dstPath).replace(/\\\\/g, \"/\");\n        } else {\n          dstPath = template.dst;\n        }\n\n        const fullPath = path\n          .join(this.pluginPath, template.src)\n          .replace(/\\\\/g, \"/\");\n\n        const files = await glob(fullPath);\n\n        for (const file of files) {\n          const fileName = path.basename(file.replace(\".eta\", \"\"));\n\n          const relativePath = path\n            .relative(pluginsAbsolutePath, file)\n            .replace(/\\\\/g, \"/\");\n\n          const rendered = eta.render(relativePath, {\n            ...data,\n            timestamp: new Date().toISOString(),\n          });\n\n          const isFile = path.extname(dstPath) !== \"\";\n\n          if (!isFile) {\n            await fsp.mkdir(dstPath, { recursive: true });\n            dstPath = path.join(dstPath, fileName);\n          } else {\n            await fsp.mkdir(path.dirname(dstPath), { recursive: true });\n          }\n          await fsp.writeFile(dstPath, rendered);\n          filesCreated.push(dstPath);\n        }\n      } catch (error) {\n        console.error(\"Eta context:\", data);\n        throw new Error(\n          `Failed to render template from ${template.src} to ${template.dst}: ${\n            (error as EtaError).message || error\n          }`,\n        );\n      }\n    }\n    return filesCreated;\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as fs from \"fs/promises\";\nimport * as path from \"path\";\nimport { CfsFileMap } from \"cfs-plugins-api\";\nimport { CfsCopyFilesService } from \"./cfs-plugin-services.js\";\nimport { glob } from \"glob\";\nimport { evalNestedTemplateLiterals } from \"../utilities/cfs-utilities.js\";\n\n/**\n * Copies the provided files to the specified destination.\n *\n * @param files - An array of CfsFileMap objects representing the files to be copied.\n * @returns A promise that resolves when the files have been copied.\n */\nexport class CfsFsCopyFilesService implements CfsCopyFilesService {\n  /**\n   * Constructor\n   * @param pluginPath - The path to the plugin.\n   * @param context - The context containing workspace information.\n   */\n  constructor(\n    protected pluginPath: string,\n    protected context: Record<string, unknown>,\n  ) {}\n\n  async copyFiles(files: CfsFileMap[], baseDir?: string): Promise<void> {\n    for (const file of files) {\n      try {\n        // Probably deriving this from the context is not the most reliable way to get the location\n        // unless all configuration files share the same interface. the client of this service usually knows where files should go to.\n        const location = (baseDir ?? this.context.path ?? \"\") as string;\n\n        const dstPath = evalNestedTemplateLiterals(\n          path.join(location, file.dst).replace(/\\\\/g, \"/\"),\n          this.context,\n        );\n        const fullPath = path\n          .join(this.pluginPath, file.src)\n          .replace(/\\\\/g, \"/\");\n\n        const filesToCopy = await glob(fullPath);\n\n        for (const fileToCopy of filesToCopy) {\n          const fileName = path.basename(fileToCopy);\n\n          const isFile = path.extname(dstPath) !== \"\";\n\n          if (isFile) {\n            await fs.mkdir(path.dirname(dstPath), { recursive: true });\n            await fs.copyFile(fileToCopy, dstPath);\n          } else {\n            await fs.mkdir(dstPath, { recursive: true });\n            await fs.copyFile(fileToCopy, path.join(dstPath, fileName));\n          }\n        }\n      } catch (error) {\n        throw new Error(\n          `Failed to copy file from ${file.src} to ${file.dst}: ${error}`,\n        );\n      }\n    }\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsFeatureScope,\n  CfsFileMap,\n  CfsPluginProperty,\n  CfsSocDataModel,\n  SocControl,\n} from \"cfs-plugins-api\";\n\nexport enum CfsPluginServiceType {\n  CopyFiles = \"copyFiles\",\n  Template = \"template\",\n  SocControlOverride = \"socControlOverride\",\n}\n\nexport interface CfsCopyFilesService {\n  /**\n   * Copy files defined in the .cfsplugin info file to their output directory\n   * @param files - The files to copy\n   * @param parentDir - The parent directory to copy files into (optional)\n   */\n  copyFiles(files: CfsFileMap[], parentDir?: string): Promise<void>;\n}\n\nexport interface CfsTemplateService {\n  /**\n   * Run eta on all templates defined in the .cfsplugin info file and write the contents to the specified output directory\n   * @param files - The template files to copy\n   * @param data - The data needed for rendering eta templates.\n   * @param parentDir - The parent directory to copy files into (optional)\n   */\n  renderTemplates(\n    templates: CfsFileMap[],\n    data: Record<string, unknown>,\n    baseDir?: string,\n  ): Promise<string[]>;\n}\n\nexport interface ControlDirective {\n  supportedControls?: Record<\"Id\", string>[];\n  removedControls?: Record<\"Id\", string>[];\n  addedControls?: SocControl[];\n  modifiedControls?: SocControl[];\n  defaultOverrides?: {\n    Id: string;\n    Value: string | number;\n    partRegexp?: string;\n  }[];\n}\n\nexport interface CfsSocControlsOverrideService {\n  /**\n   * Override Soc controls following a set of directives provided in the plugin info.\n   * @param scope - The scope of properties to retrieve (Peripheral, PinConfig, etc.)\n   * @param soc - Optional SoC data model containing control definitions\n   * @returns The properties with control directives applied\n   */\n  overrideControls(\n    scope: CfsFeatureScope,\n    soc?: CfsSocDataModel,\n  ): Record<string, SocControl[]> | CfsPluginProperty[];\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsFeature,\n  CfsProject,\n  CfsWorkspace,\n  CfsConfig,\n} from \"cfs-plugins-api\";\nimport { CfsPluginServiceType } from \"../services/cfs-plugin-services.js\";\nimport { CfsPluginServiceProvider } from \"../services/cfs-plugin-service-provider.js\";\n\nexport abstract class CfsGenerator implements CfsPluginServiceProvider {\n  /**\n   * Constructor\n   * @param pluginPath - The path to the plugin.\n   * @param cfsFeature - The feature information required for code generation.\n   * @param context - The workspace information required for code generation.\n   */\n  constructor(\n    protected pluginPath: string,\n    protected cfsFeature: CfsFeature,\n    protected context: CfsWorkspace | CfsProject | CfsConfig\n  ) {}\n\n  /**\n   * Gets the service (ex: CfsCopyFilesService, EtaTemplateService)\n   * @param service - The name of the service to retrieve (ex: \"copyFiles\", \"template\")\n   * @returns An instance of the requested service type.\n   */\n  abstract getService<T>(service: CfsPluginServiceType): T;\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsProject, CfsWorkspace } from \"cfs-plugins-api\";\nimport { CfsEtaTemplateService } from \"../../services/cfs-eta-template-service.js\";\nimport { CfsFsCopyFilesService } from \"../../services/cfs-fs-copy-files-service.js\";\nimport { CfsPluginServiceType } from \"../../services/cfs-plugin-services.js\";\nimport { CfsGenerator } from \"../cfs-generator.js\";\n\nexport class CfsEtaGenerator extends CfsGenerator {\n  /**\n   * Retrieves a service instance based on the provided service type.\n   *\n   * @template T - The type of the service to be returned.\n   * @param {CfsPluginServiceType} service - The type of service to retrieve.\n   * @returns {T} - An instance of the requested service type.\n   * @throws {Error} - Throws an error if the requested service type is not supported.\n   */\n  getService<T>(service: CfsPluginServiceType): T | never {\n    switch (service) {\n      case CfsPluginServiceType.Template:\n        return new CfsEtaTemplateService(this.pluginPath, this.context) as T;\n      case CfsPluginServiceType.CopyFiles:\n        return new CfsFsCopyFilesService(\n          this.pluginPath,\n          this.context as CfsWorkspace | CfsProject,\n        ) as T;\n      default:\n        throw new Error(`Service: ${service as string} is not supported yet.`);\n    }\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsWorkspace, CfsWorkspaceGenerator } from \"cfs-plugins-api\";\nimport { CfsEtaGenerator } from \"./cfs-eta-generator.js\";\nimport {\n  CfsCopyFilesService,\n  CfsPluginServiceType,\n} from \"../../services/cfs-plugin-services.js\";\nimport { CfsEtaTemplateService } from \"../../services/cfs-eta-template-service.js\";\nimport { mkdir, writeFile } from \"fs/promises\";\nimport path from \"path\";\nimport { titleCase } from \"../../utilities/cfs-utilities.js\";\n\nexport class CfsEtaWorkspaceGenerator\n  extends CfsEtaGenerator\n  implements CfsWorkspaceGenerator\n{\n  /**\n   * Generates the workspace by copying files and rendering templates.\n   * @param cfsWorkspace - The workspace information required for code generation.\n   * @returns A promise that resolves when the workspace generation is complete.\n   */\n  async generateWorkspace(cfsWorkspace: CfsWorkspace) {\n    if (!cfsWorkspace.location) {\n      throw new Error(\"Workspace location is undefined\");\n    }\n\n    const workspacePath = path.join(\n      cfsWorkspace.location,\n      cfsWorkspace.workspaceName ?? \"\",\n    );\n\n    // Create the workspace directory\n    await mkdir(workspacePath, { recursive: true });\n\n    // Create the .cfs directory within the workspace directory\n    const cfsDir = path.join(workspacePath, \".cfs\");\n    await mkdir(cfsDir, { recursive: true });\n\n    // Create the .cfsworkspace file inside the .cfs directory\n    const cfsWorkspaceFile = path.join(cfsDir, \".cfsworkspace\");\n\n    console.log(\"process cwd generate workspace plugin\", process.cwd());\n    console.log({ cfsWorkspace });\n\n    const titleCasedWorkspace = Object.fromEntries(\n      Object.entries(cfsWorkspace).map(([key, value]) => [\n        titleCase(key),\n        value,\n      ]),\n    );\n\n    await writeFile(\n      cfsWorkspaceFile,\n      JSON.stringify(titleCasedWorkspace, null, 2),\n    );\n\n    const copyFilesService = this.getService<CfsCopyFilesService>(\n      CfsPluginServiceType.CopyFiles,\n    );\n\n    await copyFilesService.copyFiles(this.cfsFeature.files, workspacePath);\n\n    const templateService = this.getService<CfsEtaTemplateService>(\n      CfsPluginServiceType.Template,\n    );\n\n    await templateService.renderTemplates(\n      this.cfsFeature.templates,\n      this.context,\n      workspacePath,\n    );\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsProjectGenerator } from \"cfs-plugins-api\";\nimport { CfsEtaGenerator } from \"./cfs-eta-generator.js\";\nimport {\n  CfsCopyFilesService,\n  CfsPluginServiceType,\n} from \"../../services/cfs-plugin-services.js\";\nimport { CfsEtaTemplateService } from \"../../services/cfs-eta-template-service.js\";\n\nexport class CfsEtaProjectGenerator\n  extends CfsEtaGenerator\n  implements CfsProjectGenerator\n{\n  /**\n   * Generates the project by copying files and rendering templates.\n   * @param baseDir - Directory location for the files generated.\n   * @returns A promise that resolves when the project generation is complete.\n   */\n  async generateProject(baseDir?: string): Promise<void> {\n    const copyFilesService = this.getService<CfsCopyFilesService>(\n      CfsPluginServiceType.CopyFiles,\n    );\n\n    await copyFilesService.copyFiles(this.cfsFeature.files, baseDir);\n\n    const templateService = this.getService<CfsEtaTemplateService>(\n      CfsPluginServiceType.Template,\n    );\n\n    await templateService.renderTemplates(\n      this.cfsFeature.templates,\n      this.context,\n      baseDir,\n    );\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  CfsCodeGenerator,\n  CfsConfig,\n  ConfiguredProject,\n} from \"cfs-plugins-api\";\nimport { CfsEtaGenerator } from \"./cfs-eta-generator.js\";\nimport { CfsEtaTemplateService } from \"../../services/cfs-eta-template-service.js\";\nimport {\n  CfsCopyFilesService,\n  CfsPluginServiceType,\n} from \"../../services/cfs-plugin-services.js\";\nimport path from \"path\";\n\nexport class CfsEtaCodeGenerator\n  extends CfsEtaGenerator\n  implements CfsCodeGenerator\n{\n  /**\n   * Generates code by copying files and rendering templates.\n   * @param data - The data needed for rendering eta templates.\n   * @param baseDir - Directory location for the files generated.\n   * @returns A promise that resolves when the code generation is complete.\n   */\n  async generateCode(\n    data: Record<string, unknown>,\n    baseDir: string,\n  ): Promise<string[]> {\n    const projectId = data.projectId as string;\n\n    const projectConfig = (data.cfsconfig as CfsConfig).Projects.find(\n      (proj: ConfiguredProject) => proj.ProjectId === projectId,\n    );\n\n    if (!projectConfig) {\n      throw new Error(`Project with ID ${projectId} not found in cfsconfig.`);\n    }\n\n    const projectDir = path\n      .join(\n        baseDir,\n        (projectConfig.PlatformConfig as { ProjectName: string }).ProjectName,\n      )\n      .replace(/\\\\/g, \"/\");\n\n    const copyFilesService = this.getService<CfsCopyFilesService>(\n      CfsPluginServiceType.CopyFiles,\n    );\n\n    await copyFilesService.copyFiles(this.cfsFeature.files, projectDir);\n\n    const templateService = this.getService<CfsEtaTemplateService>(\n      CfsPluginServiceType.Template,\n    );\n\n    const filesCreated = await templateService.renderTemplates(\n      this.cfsFeature.templates,\n      data,\n      projectDir,\n    );\n    return filesCreated;\n  }\n}\n","/**\n *\n * Copyright (c) 2025 Analog Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CfsFeatureScope, CfsPlugin } from \"cfs-plugins-api\";\nimport { CfsEtaWorkspaceGenerator } from \"../common/generators/eta/cfs-eta-workspace-generator.js\";\nimport { CfsEtaProjectGenerator } from \"../common/generators/eta/cfs-eta-project-generator.js\";\nimport { CfsEtaCodeGenerator } from \"../common/generators/eta/cfs-eta-code-generator.js\";\nimport path from \"path\";\n\nclass Plugin extends CfsPlugin {\n  public getService<T>(service: string): T {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public getEnvironmentVariables() {\n    return [];\n  }\n\n  public getGenerator<T>(generator: CfsFeatureScope): T {\n    switch (generator) {\n      case CfsFeatureScope.Workspace:\n        return new CfsEtaWorkspaceGenerator(\n          path.dirname(this.cfsPluginInfo.pluginPath),\n          this.cfsPluginInfo.features.workspace,\n          this.context,\n        ) as T;\n      case CfsFeatureScope.Project:\n        return new CfsEtaProjectGenerator(\n          path.dirname(this.cfsPluginInfo.pluginPath),\n          this.cfsPluginInfo.features.project,\n          this.context,\n        ) as T;\n      case CfsFeatureScope.CodeGen:\n        return new CfsEtaCodeGenerator(\n          path.dirname(this.cfsPluginInfo.pluginPath),\n          this.cfsPluginInfo.features.codegen,\n          this.context,\n        ) as T;\n      default:\n        throw new Error(`Generator: ${generator} is not supported`);\n    }\n  }\n}\n\nexport default Plugin;\n"],"names":["eta","Eta","glob","fsp","path","fs","mkdir","writeFile"],"mappings":"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"}