{
    "$schema" : "https://json-schema.org/draft/2020-12/schema",
    "title" : "CFS Data Model Schema version 1.1.0",
    "description" : "Schema for CFS Data Model version 1.1.0",
    "type" : "object",
    "properties" : {
        "Copyright" : {
            "description" : "The copyright for the file.",
            "type" : "string",
            "pattern" : "Copyright.*Analog Devices.*All rights reserved"
        },
        "Version" : {
            "description" : "The version number of the data model file.",
            "type" : "string",
            "pattern" : "[0-9]+\\.[0-9]+\\.[0-9]+-?.*"
        },
        "Schema" : {
            "description" : "The version number of the data model schema.",
            "type" : "string",
            "const" : "1.1.0"
        },
        "Timestamp" : {
            "description" : "The time of generation of the file.",
            "type" : "string",
            "format" : "date-time"
        },
        "Name" : {
            "description" : "The name of the part.",
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 20
        },
        "Description" : {
            "description" : "The description of the part.",
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 160
        },
        "Endianness" : {
            "description" : "The endianness of the part.",
            "type" : "string",
            "enum" : [
                "Little",
                "Big"
            ]
        },
        "Parts" : {
            "description" : "The SoC parts supported by this file.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Name" : {
                        "description" : "The part name of this SoC.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Package" : {
                        "description" : "The package used by this SoC. Must correspond to one of the packages described in this file.",
                        "type" : "string"
                    },
                    "MemoryDescription" : {
                        "description" : "Description of the memory characteristics of the part.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    }
                },
                "additionalProperties" : false
            },
            "required" : [
                "Name",
                "Package",
                "MemoryDescription"
            ]
        },
        "MemoryTypes" : {
            "description" : "The type categories of memory used in the UI.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Name" : {
                        "description" : "The name of the memory type.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Description" : {
                        "description" : "The description of the memory type.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "IsVolatile" : {
                        "description" : "Whether the memory is volatile or not.",
                        "type" : "boolean"
                    }
                },
                "additionalProperties" : false,
                "required" : [
                    "Name",
                    "Description",
                    "IsVolatile"
                ]
            },
            "minItems" : 1,
            "uniqueItems" : true
        },
        "Cores" : {
            "description" : "The cores available on the SoC.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Id" : {
                        "description" : "The short abbreviation for the core, used as an Id.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 10
                    },
                    "Name" : {
                        "description" : "The name for the core, visible in the UI.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Description" : {
                        "description" : "The description of the core.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "CoreNum" : {
                        "description" : "The ID number of the core, as seen by the hardware.",
                        "type" : "integer"
                    },
                    "IsPrimary" : {
                        "description" : "Whether this is the primary core or not.",
                        "type" : "boolean"
                    },
                    "TrustZone" : {
                        "description" : "Information for TrustZone support.",
                        "type" : "object",
                        "properties" : {
                        },
                        "additionalProperties" : false,
                        "required" : [
                        ]
                    },
                    "Memory" : {
                        "description" : "The memory ranges visible to the core.",
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The name of the memory range.",
                                    "type" : "string"
                                },
                                "Description" : {
                                    "description" : "The description of the memory region.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "AddressStart" : {
                                    "description" : "The first address in the region.",
                                    "type" : "string",
                                    "pattern" : "^0[xX][0-9a-fA-F]+$",
                                    "minLength" : 1,
                                    "maxLength" : 10
                                },
                                "AddressEnd" : {
                                    "description" : "The last address in the region.",
                                    "type" : "string",
                                    "pattern" : "^0[xX][0-9a-fA-F]+$",
                                    "minLength" : 1,
                                    "maxLength" : 10
                                },
                                "Width" : {
                                    "description" : "The bit width of an addressable unit.",
                                    "type" : "integer",
                                    "enum" : [
                                        8,
                                        16,
                                        32,
                                        64,
                                        128,
                                        256
                                    ]
                                },
                                "MinimumAlignment" : {
                                    "description" : "The minimum alignment in bytes of partitions of the memory region.",
                                    "type" : "integer"
                                },
                                "Access" : {
                                    "description" : "The accessibility of the memory region.",
                                    "type" : "string",
                                    "enum" : [
                                        "R/W",
                                        "R"
                                    ]
                                },
                                "Type" : {
                                    "description" : "The type category of the memory region.",
                                    "type" : "string"
                                },
                                "Location" : {
                                    "description" : "The location of the memory region.",
                                    "type" : "string",
                                    "enum" : [
                                        "Internal",
                                        "External"
                                    ]
                                },
                                "TrustZone" : {
                                    "description" : "Information for TrustZone support.",
                                    "type" : "object",
                                    "properties" : {
                                        "SecureAddressOffset" : {
                                            "description" : "The offset to add to the address to get the secure address.",
                                            "type" : "string",
                                            "pattern" : "^0[xX][0-9a-fA-F]+$",
                                            "minLength" : 1,
                                            "maxLength" : 10
                                        }
                                    },
                                    "additionalProperties" : false,
                                    "required" : [
                                        "SecureAddressOffset"
                                    ]
                                }
                            },
                            "additionalProperties" : false,
                            "required" : [
                                "Name",
                                "Description",
                                "AddressStart",
                                "AddressEnd",
                                "Width",
                                "Access",
                                "Type",
                                "Location"
                            ]
                        },
                        "minItems" : 1,
                        "uniqueItems" : true
                    }
                },
                "additionalProperties" : false,
                "required" : [
                    "Name",
                    "Description",
                    "Id",
                    "Memory"
                ]
            }
        },
        "Controls" : {
            "description" : "UI Controls for configuration tools.",
            "type" : "object",
            "additionalProperties" : {
                "description" : "Information on the configuration controls for a configuration tool.",
                "type" : "array",
                "items" : {
                    "type": "object",
                    "properties" : {
                        "Id" : {
                            "description" : "The ID for the control.",
                            "type" : "string"
                        },
                        "Description" : {
                            "description" : "The description of the control.",
                            "type" : "string",
                            "minLength" : 1,
                            "maxLength" : 80
                        },
                        "Type" : {
                            "description" : "The type of values that can be given to the control.",
                            "type" : "string",
                            "enum" : [
                                "enum",
                                "integer",
                                "boolean",
                                "text"
                            ]
                        },
                        "EnumValues" : {
                            "description" : "The possible values accepted for an enumeration control.",
                            "type" : "array",
                            "items" : {
                                "type" : "object",
                                "properties" : {
                                    "Id" : {
                                        "description" : "The ID of the enumeration value.",
                                        "type" : "string"
                                    },
                                    "Description" : {
                                        "description" : "The description of the enumeration value.",
                                        "type" : "string",
                                        "minLength" : 1,
                                        "maxLength" : 30
                                    },
                                    "Value": {
                                        "description" : "The value of the enumeration value.",
                                        "type" : "integer"
                                    }
                                },
                                "required" : [
                                    "Id",
                                    "Description",
                                    "Value"
                                ],
                                "additionalProperties" : false
                            }
                        },
                        "MinimumValue" : {
                            "description" : "The minimum value of an integer input.",
                            "$ref" : "#/$defs/multiFormatInteger"
                        },
                        "MaximumValue" : {
                            "description" : "The maximum value of an integer input.",
                            "$ref" : "#/$defs/multiFormatInteger"
                        },
                        "Units" : {
                            "description" : "The units used for integer values.",
                            "type" : "string",
                            "minLength" : 1,
                            "maxLength" : 10
                        },
                        "Condition" : {
                            "description" : "The condition which must be true for the control should be shown, expressed in reverse Polish notation.",
                            "type" : "string",
                            "minLength" : 1
                        },
                        "Hint" : {
                            "description" : "An expression to compute the hint to prepopulate entry boxes.",
                            "type" : "string",
                            "minLength" : 1
                        },
                        "Pattern" : {
                            "description" : "A regular expression that a text control input must obey.",
                            "type" : "string",
                            "minLength" : 1
                        }
                    },
                    "required" : [
                        "Id",
                        "Description",
                        "Type"
                    ],
                    "additionalProperties" : false
                },
                "minItems" : 1,
                "uniqueItems" : true
            }
        },
        "ClockNodes" : {
            "description" : "Information on the clock ndoes displayed on the canvas. Ordered in the order that code should be emitted.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Name" : {
                        "description" : "The name of the clock node.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Description" : {
                        "description" : "The description of the clock node.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "Type" : {
                        "description" : "The type of this node.",
                        "type" : "string",
                        "enum" : [
                            "Core",
                            "Divider",
                            "Inverse Mux",
                            "Multiplier",
                            "Mux",
                            "Oscillator",
                            "Peripheral",
                            "Pin Input",
                            "Pin Output"
                        ]
                    },
                    "Inputs" : {
                        "description" : "The clock inputs to this node.",
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The name of the clock input.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 20
                                },
                                "MinimumValue" : {
                                    "description" : "The minimum value of the input.",
                                    "$ref" : "#/$defs/multiFormatInteger"
                                },
                                "MaximumValue" : {
                                    "description" : "The maximum value of the input.",
                                    "$ref" : "#/$defs/multiFormatInteger"
                                }
                            },
                            "required" : [
                                "Name"
                            ],
                            "additionalProperties" : false
                        }
                    },
                    "Outputs" : {
                        "description" : "The clock outputs from this node.",
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The name of the clock output.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 20
                                },
                                "Description" : {
                                    "description" : "The description of the clock output.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "Value" : {
                                    "description" : "An expression to compute the value of the clock output, expressed in reverse Polish notation.",
                                    "type" : "string",
                                    "minLength" : 1
                                },
                                "MinimumValue" : {
                                    "description" : "The minimum value of the output.",
                                    "$ref" : "#/$defs/multiFormatInteger"
                                },
                                "MaximumValue" : {
                                    "description" : "The maximum value of the output.",
                                    "$ref" : "#/$defs/multiFormatInteger"
                                },
                                "Condition" : {
                                    "description" : "If false, the output is not used. Expressed in reverse Polish notation.",
                                    "type" : "string",
                                    "minLength" : 1
                                }
                            },
                            "required" : [
                                "Name",
                                "Description",
                                "Value"
                            ],
                            "additionalProperties" : false
                        }
                    },
                    "Signpost" : {
                        "type" : "string",
                        "description" : "Information to display in details view to help user understand what to do.",
                        "pattern" : "[A-Z].*\\."
                    },
                    "Initialization" : {
                        "description" : "Information on how to initialize the part when this clock node is active. Often used for oscillators.",
                        "$ref" : "#/$defs/programmingSequence"
                    },
                    "Config" : {
                        "description" : "The available configuration options for the clock node.",
                        "type" : "object",
                        "additionalProperties" : {
                            "description" : "The property name gives the control identifier.",
                            "type" : "object",
                            "additionalProperties" : {
                                "description" : "The property name gives the enum value of the control.",
                                "$ref" : "#/$defs/programmingSequence"
                            }
                        }
                    },
                    "ConfigUIOrder" : {
                        "description" : "The order for emitting the UI elements, as a list of control names.",
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "ConfigProgrammingOrder" : {
                        "description" : "The order for emitting the configuration code, as a list of control names.",
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                },
                "required" : [
                    "Name",
                    "Description",
                    "Type",
                    "Inputs",
                    "Outputs"
                ],
                "additionalProperties" : false
            }
        },
        "Peripherals" : {
            "description" : "The peripherals on the part.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Name" : {
                        "description" : "The short name of the peripheral.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Description" : {
                        "description" : "The description of the peripheral.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "Security" : {
                        "description" : "The security level of the peripheral. Defaults to Any.",
                        "type" : "string",
                        "enum" : [
                            "Any",
                            "Secure",
                            "Non-Secure"
                        ]
                    },
                    "Config" : {
                        "description" : "The available configuration options for the clock node.",
                        "type" : "object",
                        "additionalProperties" : {
                            "description" : "The property name gives the control identifier.",
                            "type" : "object",
                            "additionalProperties" : {
                                "description" : "The property name gives the enum value of the control.",
                                "$ref" : "#/$defs/programmingSequence"
                            }
                        }
                    },
                    "ConfigProgrammingOrder" : {
                        "description" : "The order for emitting the configuration code as a list of control names.",
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "Signals" : {
                        "description" : "The list of signals in this peripheral.",
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The short name for the signal.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 12
                                },
                                "Description" : {
                                    "description" : "The description of the signal.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "Required": {
                                    "description" : "If provided, evaluate this condition to determine if signal is required to be assigned. If not provided, signal is assumed to be required.",
                                    "type" : "string",
                                    "minLength" : 1
                                }
                            },
                            "required" : [
                                "Name",
                                "Description"
                            ],
                            "additionalProperties" : false
                        }
                    },
                    "Cores" : {
                        "description" : "The cores that can have this peripheral assigned to them.",
                        "type" : "array",
                        "items" : {
                            "type" : "string",
                            "minLength" : 1
                        },
                        "uniqueItems" : true
                    },
                    "Preassigned" : {
                        "description" : "True if we should preassign this peripheral to the core.",
                        "type" : "boolean"
                    },
                    "SignalGroup" : {
                        "description" : "The group of the signals, if all signals have to be assigned together to a core.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Initialization" : {
                        "description" : "Information on how to initialize the part to use this peripheral.",
                        "$ref" : "#/$defs/programmingSequence"
                    }
                },
                "required" : [
                    "Name",
                    "Description",
                    "Cores"
                ],
                "additionalProperties" : false
            },
            "minItems" : 1,
            "uniqueItems" : true
        },
        "Registers" : {
            "description" : "The registers needed for configuration.",
            "type" : "array",
            "items" : {
                "type": "object",
                "properties" : {
                    "Name" : {
                        "description" : "The name of the register, all upper case.",
                        "type" : "string",
                        "pattern" : "^[A-Z][A-Z_0-9]*$",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "Description" : {
                        "description" : "The description of the register.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "Documentation" : {
                        "description" : "The documentation for the register.",
                        "type" : "string",
                        "pattern" : "[0-9A-Z].*\\."
                    },
                    "Address" : {
                        "description" : "The address of the register in hexadecimal.",
                        "type" : "string",
                        "pattern" : "^0[xX][0-9a-fA-F]+$",
                        "minLength" : 1,
                        "maxLength" : 10
                    },
                    "Size" : {
                        "description" : "The size of the register in bits.",
                        "type" : "integer",
                        "enum" : [
                            8,
                            16,
                            32,
                            64,
                            128,
                            256
                        ]
                    },
                    "Fields" : {
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The name of the field, all upper case.",
                                    "type" : "string",
                                    "pattern" : "^[A-Z][A-Z_0-9]*$",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "Description" : {
                                    "description" : "The description of the field.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "Documentation" : {
                                    "description" : "The documentation for the field.",
                                    "type" : "string",
                                    "pattern" : "[0-9A-Z].*\\."
                                },
                                "Position" : {
                                    "description" : "The bit position of the field within the register.",
                                    "type" : "integer"
                                },
                                "Length" : {
                                    "description" : "The length of the field, in bits.",
                                    "type" : "integer"
                                },
                                "Access" : {
                                    "description" : "The accessibility of the field.",
                                    "type" : "string",
                                    "enum" : [
                                        "R/W",
                                        "R",
                                        "W",
                                        "W1",
                                        "R/W1"
                                    ]
                                },
                                "Reset" : {
                                    "description" : "The reset value of the field.",
                                    "$ref" : "#/$defs/multiFormatInteger"
                                },
                                "Enum" : {
                                    "description" : "The possible enumeration values that this field can take.",
                                    "type" : "array",
                                    "items" : {
                                        "type" : "object",
                                        "properties" : {
                                            "Name" : {
                                                "description" : "The name of the enum identifier, all upper case.",
                                                "type" : "string",
                                                "pattern" : "^[0-9A-Z][A-Z_0-9]*$",
                                                "minLength" : 1,
                                                "maxLength" : 80
                                            },
                                            "Description" : {
                                                "description" : "The description of the enum identifier.",
                                                "type" : "string",
                                                "minLength" : 1,
                                                "maxLength" : 80
                                            },
                                            "Documentation" : {
                                                "description" : "The documentation for the enum identifier.",
                                                "type" : "string",
                                                "pattern" : "[0-9A-Z].*\\."
                                            },
                                            "Value" : {
                                                "description" : "The value of this enumeration identifier.",
                                                "$ref" : "#/$defs/multiFormatInteger"
                                            }
                                        }
                                    },
                                    "required" : [
                                        "Name",
                                        "Description",
                                        "Value"
                                    ],
                                    "additionalProperties" : false
                                }
                            },
                            "required" : [
                                "Name",
                                "Description",
                                "Position",
                                "Length",
                                "Access",
                                "Reset"
                            ],
                            "additionalProperties" : false
                        }
                    },
                    "Svg" : {
                        "description" : "The name of the svg file for the register.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    }
                },
                "required" : [
                    "Name",
                    "Description",
                    "Address",
                    "Size",
                    "Svg"
                ],
                "additionalProperties" : false
           },
           "minItems" : 1,
           "uniqueItems" : true
        },
        "Packages" : {
            "description" : "The packages for the part in this file.",
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Name" : {
                        "description" : "The short name of the package.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 20
                    },
                    "Description" : {
                        "description" : "The description of the package.",
                        "type" : "string",
                        "minLength" : 1,
                        "maxLength" : 80
                    },
                    "NumPins" : {
                        "description" : "The number of pins in the package.",
                        "type" : "integer"
                    },
                    "Pins" : {
                        "description" : "The definition of the package pins.",
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Name" : {
                                    "description" : "The pin name.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 10
                                },
                                "Label" : {
                                    "description" : "The label to attach to the pin.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 21
                                },
                                "Description" : {
                                    "description" : "The description of the pin.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 80
                                },
                                "Position" : {
                                    "description" : "The position of the pin on the package.",
                                    "type" : "object",
                                    "properties" : {
                                        "X" : {
                                            "description" : "The x coordinate of the pin on the canvas.",
                                            "type" : "integer"
                                        },
                                        "Y" : {
                                            "description" : "The y coordinate of the pin on the canvas.",
                                            "type" : "integer"
                                        }
                                    },
                                    "required" : [
                                        "X",
                                        "Y"
                                    ],
                                    "additionalProperties" : false
                                },
                                "Shape" : {
                                    "description" : "The physical shape of the pin.",
                                    "type" : "string",
                                    "enum" : [
                                        "Ball",
                                        "Rectangle"
                                    ]
                                },
                                "GPIOName" : {
                                    "description" : "The GPIO port name, if GPIO. Refers to the GPIO peripheral instance.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 10
                                },
                                "GPIOPort" : {
                                    "description" : "The GPIO port number or letter, if GPIO.",
                                    "type" : "string",
                                    "minLength" : 1,
                                    "maxLength" : 1
                                },
                                "GPIOPin" : {
                                    "description" : "The GPIO pin number on the port, if GPIO.",
                                    "type" : "integer",
                                    "minimum" : 0,
                                    "maximum" : 31
                                },
                                "Signals" : {
                                    "description" : "The list of signals that can be assigned to the pin.",
                                    "type" : "array",
                                    "items" : {
                                        "type" : "object",
                                        "properties" : {
                                            "Peripheral" : {
                                                "description" : "The short name of the peripheral. Must match the name used in the peripherals section.",
                                                "type" : "string"
                                            },
                                            "Name" : {
                                                "description" : "The short name of the signal. Must match the name used in the peripherals section.",
                                                "type" : "string"
                                            },
                                            "PinMuxSlot" : {
                                                "description" : "The number of the pin mux function, if pin muxed.",
                                                "type" : "integer"
                                            },
                                            "PinMuxConfig" : {
                                                "description" : "Information on how to configure the part to use this signal.",
                                                "$ref" : "#/$defs/programmingSequence"
                                            },
                                            "PinConfig" : {
                                                "description" : "The available configuration options for the pin and signal.",
                                                "$ref" : "#/$defs/configOptions"
                                            },
                                            "ConfigProgrammingOrder" : {
                                                "description" : "The order for emitting the configuration code as a list of control names.",
                                                "type" : "array",
                                                "items" : {
                                                    "type" : "string"
                                                }
                                            }
                                        },
                                        "required" : [
                                            "Peripheral",
                                            "Name"
                                        ],
                                        "additionalProperties" : false
                                    },
                                    "minItems" : 1,
                                    "uniqueItems" : true
                                }
                            },
                            "required" : [
                                "Name",
                                "Description",
                                "Label",
                                "Position",
                                "Shape",
                                "Signals"
                            ],
                            "additionalProperties" : false
                        },
                        "minItems" : 1,
                        "uniqueItems" : true
                    },
                    "CoprogrammedSignals" : {
                        "description" : "Groups of signals/pins that must be selected together.",
                        "type" : "array",
                        "items" : {
                            "description" : "Group of signals/pins that must be selected together.",
                            "type" : "array",
                            "items" : {
                                "properties" : {
                                    "Pin" : {
                                        "description" : "The pin name where the signal must be selected.",
                                        "type" : "string"
                                    },
                                    "Peripheral" : {
                                        "description" : "The short name of the peripheral. Must match the name used in the peripherals section.",
                                        "type" : "string"
                                    },
                                    "Signal" : {
                                        "description" : "The short name of the signal. Must match the name used in the peripherals section.",
                                        "type" : "string"
                                    }
                                },
                                "required" : [
                                    "Pin",
                                    "Peripheral",
                                    "Signal"
                                ],
                                "additionalProperties" : false
                            }
                        }
                    },
                    "PinCanvas" : {
                        "description" : "The definition of the package canvas.",
                        "type" : "object",
                        "properties" : {
                            "Width" : {
                                "description" : "The width of the canvas, in number of pins.",
                                "type" : "integer"
                            },
                            "Height" : {
                                "description" : "The height of the canvas, in number of pins.",
                                "type" : "integer"
                            },
                            "Labels" : {
                                "description" : "A list of labels to place on or around the canvas.",
                                "type" : "array",
                                "items" : {
                                    "type" : "object",
                                    "properties" : {
                                        "Text" : {
                                            "description" : "The text for the label",
                                            "type" : "string",
                                            "minLength" : 1,
                                            "maxLength" : 10
                                        },
                                        "X" : {
                                            "description" : "The x coordinate of the label on the canvas.",
                                            "type" : "integer"
                                        },
                                        "Y" : {
                                            "description" : "The y coordinate of the label on the canvas.",
                                            "type" : "integer"
                                        }
                                    },
                                    "required" : [
                                        "Text",
                                        "X",
                                        "Y"
                                    ],
                                    "additionalProperties" : false
                                },
                                "minItems" : 1,
                                "uniqueItems" : true
                            },
                            "Svg" : {
                                "description" : "Relative path to the svg file for the package.",
                                "type" : "string"
                            }
                        },
                        "required" : [
                            "Width",
                            "Height"
                        ],
                        "additionalProperties" : false
                    },
                    "ClockCanvas" : {
                        "description" : "The definition of the clock network canvas.",
                        "type" : "object"
                    }
                },
                "required" : [
                    "Name",
                    "Description",
                    "NumPins",
                    "Pins",
                    "PinCanvas"
                ],
                "additionalProperties" : false
           },
           "minItems" : 1,
           "uniqueItems" : true
        }
    },
    "required" : [
        "Copyright",
        "Version",
        "Schema",
        "Timestamp",
        "Name",
        "Description",
        "Endianness",
        "Parts",
        "Cores",
        "MemoryTypes",
        "Peripherals",
        "Registers",
        "Packages"
    ],
    "additionalProperties" : false,

    "$defs" : {
        "multiFormatInteger" : {
            "oneOf" : [
                {
                    "type" : "string",
                    "pattern" : "^0[xX][0-9a-fA-F]+$",
                    "minLength" : 1,
                    "maxLength" : 10
                },
                {
                    "type" : "integer"
                }
            ]
        },
        "configOptions" : {
            "description" : "The available configuration options.",
            "type" : "object",
            "additionalProperties" : {
                "description" : "The property name gives the control identifier.",
                "type" : "object",
                "additionalProperties" : {
                    "description" : "The property name gives the enum value of the control.",
                    "$ref" : "#/$defs/programmingSequence"
                }
            }
        },
        "programmingSequence" : {
            "type" : "array",
            "items" : {
                "type" : "object",
                "properties" : {
                    "Register" : {
                        "description" : "The register to program. Must match a register name in the registers section.",
                        "type" : "string"
                    },
                    "Field" : {
                        "description" : "The field in the register to program. Must match a field name in the register in the registers section.",
                        "type" : "string"
                    },
                    "Value" : {
                        "description" : "Expression for value to set the field to.",
                        "type" : "string"
                    },
                    "InverseValue" : {
                        "description" : "Expression value to compute the control value from the field value.",
                        "type" : "string"
                    },
                    "Operation" : {
                        "description" : "Apply the operation to the register field.",
                        "type" : "string",
                        "enum" : [
                            "Write",
                            "Read",
                            "Poll",
                            "WithPrevious"
                        ]
                    },
                    "Wait" : {
                        "description" : "Wait for a given number of milliseconds after the step.",
                        "type" : "integer"
                    }
                },
                "required" : [
                    "Operation"
                ],
                "additionalProperties" : false
            }
        }
    }
}
